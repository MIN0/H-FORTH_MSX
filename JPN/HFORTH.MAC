; -------------------------------------------
;  H-FORTH COMPILER Ver 1.4
;            (C)1999 A.Hiramatsu
; -------------------------------------------

BDOS	EQU	5

INFCB	EQU	05CH
CURBLK	EQU	068H
RECSIZ	EQU	06AH
FILSIZ	EQU	06CH
CURREC	EQU	07CH
RNDREC	EQU	07DH

CMPXA	EQU	08000H

; KANGOUFU OF CONTROL STRUC.

K_IF	EQU	1
K_NIF	EQU	2		; NULL IF
K_EIF	EQU	3
K_WHL	EQU	10
K_LOP	EQU	11
K_BRK	EQU	12
K_ARY	EQU	100
K_ARYS	EQU	101

; DEFINE MACRO

PULD	MACRO

	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL

	ENDM

PSHD	MACRO

	DEC	HL
	LD	(HL),D
	DEC	HL
	LD	(HL),E

	ENDM

PULB	MACRO

	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	INC	HL

	ENDM

PSHB	MACRO

	DEC	HL
	LD	(HL),B
	DEC	HL
	LD	(HL),C

	ENDM

	ASEG
	ORG	0100H

	JP	START
	DB	0		; FILLER

RDVDP::	DB	098H
WRTVDP::DB	098H
DP::	DW	EOD
ENDFRE::DW	0
REGF::	DB	0
REGA::	DB	0
REGC::	DB	0
REGB::	DB	0
REGE::	DB	0
REGD::	DB	0
REGL::	DB	0
REGH::	DB	0
REGX::	DW	0
REGY::	DW	0

; FOR VDP

RDPAG::	DB	0
WRPAG::	DB	0
DSPAG::	DB	0
SX::	DW	0		; USER I/F VDP VAR
SY::	DW	0
DX::	DW	0
DY::	DW	0
NX::	DW	0
NY::	DW	0
COL::	DB	0
ARG::	DB	0
CMD::	DB	0

ECHGET::DW	0
ECHPUT::DW	0

	DW	0,0,0,0,0,0,0,0		; RESERVED VAR AREA
	DW	0,0,0,0,0,0,0,0
	DW	0,0,0,0,0,0,0,0

; INTERNAL VAR

PS::	DW	0
PSLIM::	DW	0
ZSUPF::	DB	0
SCMSAV::DB	0
GTPTR::	DW	0

DMPCNT::DW	0

PSX::	DW	0		; INTERNAL VDP VAR
PSY::	DW	0
PDX::	DW	0
PDY::	DW	0
PNX::	DW	0
PNY::	DW	0
PCOL::	DB	0
PARG::	DB	0
NIBLE::	DB	0
	DB	0		; FILLER

CHGET::	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	HL,(ECHGET)
	LD	A,L
	OR	H
	JR	Z,CHGET9
	PUSH	HL
	LD	HL,CHPUT1	; CHPUT1 SAME AS CHGET1
	EX	(SP),HL
	JP	(HL)
;CHGET1::POP	HL
;	POP	DE
;	POP	BC
;	RET

CHGET9::POP	HL
	POP	DE
	POP	BC
	LD	IX,09FH
	JR	BIOS

XCHPUT::PULD
	LD	A,E
CHPUT::	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	AF
	LD	HL,(ECHPUT)
	LD	A,L
	OR	H
	JR	Z,CHPUT9
	POP	AF
	PUSH	HL
	LD	HL,CHPUT1
	EX	(SP),HL
	JP	(HL)
CHPUT1::POP	HL
	POP	DE
	POP	BC
	RET

CHPUT9::POP	AF
	POP	HL
	POP	DE
	POP	BC
	LD	IX,0A2H
BIOS::	LD	IY,(0FCC0H)
	JP	01CH

STRDOT::PULD
MESOUT::LD	A,(DE)
	AND	A
	RET	Z
	CALL	CHPUT
	INC	DE
	JR	MESOUT

U_DOT::	PULD
OUTDEC::PUSH	HL
	XOR	A
	LD	(ZSUPF),A
	EX	DE,HL
	LD	DE,10000
	CALL	OUTDIG
	LD	DE,1000
	CALL	OUTDIG
	LD	DE,100
	CALL	OUTDIG
	LD	DE,10
	CALL	OUTDIG
	LD	A,L
	ADD	A,030H
	EX	DE,HL
	CALL	CHPUT
	POP	HL
	RET

OUTDIG::LD	B,0
OUTDLP::AND	A
	SBC	HL,DE
	JR	C,OUTDG1
	INC	B
	JR	OUTDLP
OUTDG1::ADD	HL,DE
	LD	A,(ZSUPF)
	AND	A
	JR	NZ,OUTDG2
	LD	A,B
	AND	A
	RET	Z
OUTDG2::LD	A,B
	ADD	A,030H
	LD	(ZSUPF),A
	JP	CHPUT

HEXDOT::PULD
OUTHEX::LD	A,D
	CALL	OUTHX2
	LD	A,E
OUTHX2::PUSH	AF
	RLCA
	RLCA
	RLCA
	RLCA
	CALL	OUTHX1
	POP	AF
OUTHX1::AND	0FH
	CP	0AH
	JR	C,$+4
	ADD	A,07H
	ADD	A,030H
	JP	CHPUT

HEBOUT::PULD
	LD	A,E
	JR	OUTHX2

PULDE::	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	RET

TRUE::	LD	DE,1
	RET

FALSE::	LD	DE,0
	RET

START::
	LD	A,(0FCAFH)
	LD	(SCMSAV),A	; SAVE CURRENT SCR MODE
	LD	A,(0FCC1H)	; GET VDP ADDR FROM MAIN ROM
	LD	HL,06H
	PUSH	AF
	PUSH	HL
	CALL	0CH
	LD	(RDVDP),A
	POP	HL
	POP	AF
	INC	HL
	CALL	0CH
	LD	(WRTVDP),A
	LD	HL,(06H)	; CALC PARAM STACK TOP
	LD	SP,HL
	DEC	H		; PS=RS-256
	LD	(PS),HL
	DEC	H
	DEC	H
	LD	L,0
	DEC	HL
	LD	(PSLIM),HL
	LD	(ENDFRE),HL
START00::LD	DE,M_OPEN
	CALL	MESOUT
	LD	HL,(PS)
START0::CALL	STARTX		; FOR MAKECOM

EXIT::	CALL	RESSCR
	JP	0

M_OPEN::DB	0DH,0AH,'** H-FORTH/'
M_OP2::	DB	'CP V1.4a(C)1999 A.Hiramatsu',0DH,0AH,0

RESSCR::LD	HL,0
	LD	(ECHPUT),HL
	LD	(ECHGET),HL
	LD	A,(0FCAFH)	; RESET SCREEN MODE
	LD	B,A
	LD	A,(SCMSAV)	; IF CHANGED MODE
	CP	B
	JP	Z,CRLF
	LD	IX,05FH
	CALL	BIOS
	LD	DE,DEFPAL
	JP	SETPAL0

DEFPAL::DB	00H,0H,00H,0H,11H,6H,33H,7H
	DB	17H,1H,27H,3H,51H,1H,27H,6H
	DB	71H,1H,73H,3H,61H,6H,64H,6H
	DB	11H,4H,65H,2H,55H,5H,77H,7H

JSR::	PULD
	PUSH	DE
	RET


; PARAMETER STACK OPERATIONS

DUP::	PULD
PSHDE::	PSHD
	RET

OVER::	LD	D,H
	LD	E,L
	INC	HL
	INC	HL
	INC	HL
	DEC	DE
	LD	A,(HL)
	LD	(DE),A
	DEC	HL
	DEC	DE
	LD	A,(HL)
	LD	(DE),A
	LD	L,E
	LD	H,D
	RET
	
SWAP::	PUSH	HL
	POP	IX
	LD	E,(IX+0)
	LD	D,(IX+1)
	LD	C,(IX+2)
	LD	B,(IX+3)
	LD	(IX+0),C
	LD	(IX+1),B
	LD	(IX+2),E
	LD	(IX+3),D
	RET

STORE::	PULB
	PULD
	LD	A,E
	LD	(BC),A
	INC	BC
	LD	A,D
	LD	(BC),A
	RET
	
FETCH::	PULD
	EX	DE,HL
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	EX	DE,HL
	LD	E,C
	LD	D,B
	RET

CSTORE::PULB
	PULD
	LD	A,E
	LD	(BC),A
	RET

CFETCH::PULD
	LD	A,(DE)
CFET1::	LD	E,A
	LD	D,0
	RET

XCHGET::CALL	CHGET
	JR	CFET1

PSTORE::PULB
	PULD
	OUT	(C),E
	RET

PFETCH::PULD
	LD	C,E
	IN	E,(C)
	LD	D,0
	RET

ICHRNG::BIT	7,D
	JR	NZ,OUTRNG
	SLA	E
	RL	D
BCHRNG::BIT	7,D
	JR	NZ,OUTRNG
	PUSH	HL
	LD	L,C		; HL=ARRAY HANDLE
	LD	H,B
	LD	A,(HL)		; BC=ARRAY ADDR
	INC	HL
	OR	(HL)
	JR	Z,NOTALC
	INC	HL
	LD	C,(HL)		; BC=ARRAY SIZE
	INC	HL
	LD	B,(HL)
	LD	A,C
	OR	B
	JR	Z,NOTALC
	DEC	HL
	EX	DE,HL
	AND	A
	SBC	HL,BC		; INDEX-MAX
	JR	NC,OUTRN0
	ADD	HL,BC
	EX	DE,HL
	DEC	HL		; BC=TOP OF ARRAY
	LD	B,(HL)
	DEC	HL
	LD	C,(HL)
	LD	A,C
	OR	B
	JR	Z,NOTALC
	EX	DE,HL
	ADD	HL,BC		; HL=INDEX+TOP OF ARRAY
	EX	DE,HL
	POP	HL
	RET

OUTRN0::POP	HL
OUTRNG::LD	DE,M_OUTR
	JR	XXERR
NOTALC::POP	HL
	LD	DE,M_NALC
	JR	XXERR

CHKBRK::PUSH	DE
	LD	IX,0B7H
	CALL	BIOS
	EI
	POP	DE
	RET	NC
	LD	DE,M_BRK
	JR	XXERR

XERROR::PULD
XXERR::	POP	HL
	LD	(GTPTR),HL
	PUSH	DE		; USER ERROR MESSAGE
	CALL	RESSCR
	POP	DE
	CALL	MESOUT
	LD	DE,M_AT
	CALL	MESOUT
	LD	DE,(GTPTR)
	CALL	OUTHEX
	JP	0

CHKLOP::LD	A,(PSLIM+1)
	INC	A
	CP	H
	JR	NC,STKOVF
	POP	BC		; RET ADDR
	POP	DE		; PS OF LOOP BEGIN
	PUSH	DE
	PUSH	BC
	AND	A
	SBC	HL,DE
	JR	NZ,LOPERR
	ADD	HL,DE
	RET
LOPERR::ADD	HL,DE
	LD	DE,M_LOP
	JR	STERR1
STKOVF::LD	DE,M_STOV
STERR1::JR	XXERR

M_AT::	DB	' AT $',0
M_BRK::	DB	'BREAK',0
M_OUTR::DB	'IDXOUT',0
M_NALC::DB	'ARYINV',0
M_LOP::	DB	'UNPSTK',0
M_STOV::DB	'STKOVF',0

BASTO::	PULB			; ARRAY HANDLE
	PULD			; INDEX
	CALL	BCHRNG
	LD	A,(HL)
	LD	(DE),A
	INC	HL
	INC	HL
	RET

BAFET::	PULB
	PULD
	CALL	BCHRNG
	LD	A,(DE)
	LD	E,A
	LD	D,0
	RET

IASTO::	PULB
	PULD
	CALL	ICHRNG
	LD	C,(HL)
	INC	HL
	LD	A,(HL)
	INC	HL
	INC	DE
	LD	(DE),A
	DEC	DE
	LD	A,C
	LD	(DE),A
	RET

IAFET::	PULB
	PULD
	CALL	ICHRNG
	LD	A,(DE)
	INC	DE
	LD	C,A
	LD	A,(DE)
	LD	D,A
	LD	E,C
	RET

XSTARY::PULB			; SIZE
	PULD			; ADDR
	LD	(IX+0),E
	LD	(IX+1),D
	LD	(IX+2),C
	LD	(IX+3),B
	RET

PTOR::	PULD
	POP	BC
	PUSH	DE
	PUSH	BC
	RET

RTOP::	POP	BC
	POP	DE
	PUSH	BC
	RET

; NUM PRINT WORDS

DOT::	PULD
	BIT	7,D
	JR	Z,DOT1
	LD	A,'-'
	CALL	CHPUT
	CALL	NEGATE+4
	JR	DOT2
DOT1::	CALL	SPACE
DOT2::	JP	U_DOT+4

CRLF::	LD	A,0DH
	CALL	CHPUT
	LD	A,0AH
JCHPU1::JP	CHPUT

SPACE::	LD	A,020H
	JR	JCHPU1

DMPLIN::PULB
	PULD
	LD	(GTPTR),DE
	LD	(DMPCNT),BC
DMPLP::	CALL	CRLF
	LD	DE,(GTPTR)
	CALL	OUTHEX
	LD	B,8
DMPLP2::CALL	SPACE
	LD	A,(DE)
	INC	DE
	CALL	OUTHX2
	DJNZ	DMPLP2
	CALL	SPACE
	LD	DE,(GTPTR)
	LD	B,8
DMPLP3::LD	A,(DE)
	INC	DE
	CP	020H
	JR	NC,DMP3
	PUSH	AF
	LD	A,1
	CALL	CHPUT
	POP	AF
	ADD	A,040H
DMP3::	CP	07FH
	JR	NZ,$+4
	LD	A,020H
	CALL	CHPUT
	DJNZ	DMPLP3
	EX	DE,HL
	LD	(GTPTR),HL
	LD	HL,(DMPCNT)
	LD	BC,8
	AND	A
	SBC	HL,BC
	LD	(DMPCNT),HL
	EX	DE,HL
	RET	C
	RET	Z
	JR	DMPLP

APSFET::LD	E,L
	LD	D,H
	RET

PLUS::	PULB
	PULD
	LD	A,E
	ADD	A,C
	LD	E,A
	LD	A,D
	ADC	A,B
	LD	D,A
	RET

MINUS::	PULB
	PULD
	LD	A,E
	SUB	C
	LD	E,A
	LD	A,D
	SBC	A,B
	LD	D,A
	RET

MULT::	PULB
	PULD
	PUSH	HL
	LD	HL,0
	LD	A,B
	AND	A
	JR	Z,MULT8
	DEC	A
	JR	NZ,MUL161
	LD	A,C
	AND	A
	JR	Z,MUL256
MUL161::LD	A,16
MULTLP::ADD	HL,HL
	SLA	C
	RL	B
	JR	NC,$+3
	ADD	HL,DE
	DEC	A
	JR	NZ,MULTLP
	EX	DE,HL
	POP	HL
	RET
MULT8::	LD	A,C
	AND	A
	JP	Z,MUL0
	DEC	C
	JR	Z,MUL1
	DEC	C
	JR	Z,MUL2
	LD	B,8
MUL8LP::ADD	HL,HL
	RLCA
	JR	NC,$+3
	ADD	HL,DE
	DJNZ	MUL8LP
	EX	DE,HL
MUL1::	POP	HL
	RET
MUL2::	SLA	E
	RL	D
	JP	MUL1
MUL0::	LD	DE,0
	JP	MUL1
MUL256::LD	D,E
	LD	E,0
	JP	MUL1

DIV::	PULD
	LD	A,D
	AND	A		; D=0 ?
	JR	NZ,DIV100
	LD	A,E
	AND	A
	JR	Z,DIV0
	DEC	A
	JR	Z,DIV101
	DEC	A
	JR	Z,DIV102
	JP	DIV199
DIV100::DEC	A		; D=1 ?
	JR	NZ,DIV199
	LD	A,E
	AND	A
	JR	Z,DIV256
DIV199::PULB
	PUSH	HL
	LD	L,C
	LD	H,B
	EX	DE,HL
	LD	BC,0
	LD	A,H
	AND	A
	JR	NZ,DIV19A
	LD	H,L
	LD	L,0
	LD	A,9
	JR	DIVLP1
DIV19A::LD	A,1
DIVLP1::BIT	7,H
	JR	NZ,DIV1
	ADD	HL,HL
	INC	A
	JR	DIVLP1
DIV1::	EX	DE,HL
DIVLP2::SLA	C
	RL	B
	AND	A
	SBC	HL,DE
	JR	C,$+5
	INC	C
	JR	$+3
	ADD	HL,DE
	SRL	D
	RR	E
	DEC	A
	JR	NZ,DIVLP2
	LD	D,B
	LD	E,C
	POP	HL
	RET
DIV0::	INC	HL		; DROP
	INC	HL
	LD	DE,0FFFFH
	RET
DIV101::JP	PULDE		; /1
DIV102::CALL	PULDE		; /2
	SRL	D
	RR	E
	RET
DIV256::INC	HL		; /256
	LD	E,(HL)
	INC	HL
	LD	D,0
	RET

IDIV::	PULB
	PULD
	LD	A,D
	XOR	B		; RESULT SIGN
	PUSH	AF
	BIT	7,D
	JR	Z,IDIV1
	LD	A,E
	CPL
	LD	E,A
	LD	A,D
	CPL
	LD	D,A
	INC	DE
IDIV1::	BIT	7,B
	JR	Z,IDIV2
	LD	A,C
	CPL
	LD	C,A
	LD	A,B
	CPL
	LD	B,A
	INC	BC
IDIV2::	PSHD
	LD	E,C
	LD	D,B
	CALL	DIV+4
	POP	AF
	CALL	M,NEGATE+4
	RET

XAND::	PULB
	PULD
	LD	A,E
	AND	C
	LD	E,A
	LD	A,D
	AND	B
	LD	D,A
	RET

XOR::	PULB
	PULD
	LD	A,E
	OR	C
	LD	E,A
	LD	A,D
	OR	B
	LD	D,A
	RET

XXOR::	PULB
	PULD
	LD	A,E
	XOR	C
	LD	E,A
	LD	A,D
	XOR	B
	LD	D,A
	RET

XCPL::	PULD
CPL1::	LD	A,E
	CPL
	LD	E,A
	LD	A,D
	CPL
	LD	D,A
	RET

NEGATE::PULD
NEG1::	DEC	DE
	JR	CPL1

ABS::	PULD
	BIT	7,D
	RET	Z
	JR	NEG1

CBW::	PULD
	LD	D,0
	BIT	7,E
	RET	Z
	DEC	D
	RET

EQUAL::	PULB
	PULD
	LD	A,D
	CP	B
	JP	NZ,FALSE
	LD	A,E
	CP	C
	JP	NZ,FALSE
	JP	TRUE	

U_GT::	PULB
	PULD
U_GT1::	LD	A,D
	CP	B
	JP	C,FALSE
	JP	NZ,TRUE
	LD	A,E
	CP	C
	JP	C,FALSE
	JP	Z,FALSE
	JP	TRUE

U_GEQ::	PULB
	PULD
U_GE1::	LD	A,D
	CP	B
	JP	C,FALSE
	JP	NZ,TRUE
	LD	A,E
	CP	C
	JP	C,FALSE
	JP	TRUE

U_LT::	PULB
	PULD
U_LT1::	LD	A,D
	CP	B
	JP	C,TRUE
	JP	NZ,FALSE
	LD	A,E
	CP	C
	JP	C,TRUE
	JP	FALSE

U_LSEQ::PULB
	PULD
U_LE1::	LD	A,D
	CP	B
	JP	C,TRUE
	JP	NZ,FALSE
	LD	A,E
	CP	C
	JP	C,TRUE
	JP	Z,TRUE
	JP	FALSE

NEQ::	PULB
	PULD
	LD	A,D
	CP	B
	JP	NZ,TRUE
	LD	A,E
	CP	C
	JP	NZ,TRUE
	JP	FALSE

ZEQ::	PULD
ZEQ1::	LD	A,E
	OR	D
	JP	Z,TRUE
	JP	FALSE

GT::	PULB
	PULD
	LD	A,D
	XOR	B
	JP	P,U_GT1
GT1::	BIT	7,D
	JP	Z,TRUE
	JP	FALSE

GE::	PULB
	PULD
	LD	A,D
	XOR	B
	JP	P,U_GE1
	JP	GT1

LT::	PULB
	PULD
	LD	A,D
	XOR	B
	JP	P,U_LT1
LT1::	BIT	7,D
	JP	NZ,TRUE
	JP	FALSE

LE::	PULB
	PULD
	LD	A,D
	XOR	B
	JP	P,U_LE1
	JP	LT1

QMINUS::PULD
	BIT	7,D
	JP	NZ,TRUE
	JP	FALSE

XCALL::	PULD
	PUSH	HL
	LD	BC,CALL1
	PUSH	BC		; RET ADDR
	PUSH	DE		; DST ADDR
	LD	IX,(REGX)
	LD	IY,(REGY)
	JP	LDREG
CALL1::	CALL	STREG
	LD	(REGX),IX
	LD	(REGY),IY
	POP	HL
	RET

LDREG::	LD	HL,(REGF)
	PUSH	HL
	POP	AF
	LD	HL,(REGL)
	LD	BC,(REGC)
	LD	DE,(REGE)
	RET			; JUMP TO DST ADDR
STREG::	LD	(REGL),HL
	PUSH	AF
	POP	HL
	LD	(REGF),HL
	LD	(REGC),BC
	LD	(REGE),DE
	RET

XBIOS::	PULD
	PUSH	HL
	LD	BC,BIOS1
	PUSH	BC
	LD	BC,01CH
	PUSH	BC
	PUSH	DE
	POP	IX
	LD	IY,(0FCC0H)
	JP	LDREG
BIOS1::	CALL	STREG
	POP	HL
	RET

MOVMEM::PULB			; TARGET
	PULD			; BYTES
	PUSH	DE
	LD	E,C
	LD	D,B
	POP	BC
	LD	A,(HL)
	INC	HL
	PUSH	HL
	LD	H,(HL)
	LD	L,A
	LD	A,H
	CP	D
	JR	C,XLDDR
	JR	NZ,XLDIR1
	LD	A,L
	CP	E
	JR	C,XLDDR
	JR	Z,XLDIR2
XLDIR1::LDIR
XLDIR2::POP	HL
	INC	HL
	RET
XLDDR::	ADD	HL,BC
	DEC	HL
	EX	DE,HL
	ADD	HL,BC
	DEC	HL
	EX	DE,HL
	LDDR
	POP	HL
	INC	HL
	RET

STREQ::	PULB
	PULD
	PUSH	HL
	LD	L,E
	LD	H,D
STEQLP::LD	A,(BC)
	AND	A
	JR	Z,STEQRT
	CP	(HL)
	JR	NZ,STNEQ
	INC	BC
	INC	HL
	JR	STEQLP
STEQRT::POP	HL
	JP	TRUE
STNEQ::	POP	HL
	JP	FALSE

STRMOV::PULB
	PULD
STMVLP::LD	A,(DE)
	AND	A
	LD	(BC),A
	RET	Z
	INC	BC
	INC	DE
	JR	STMVLP

STRLEN::PULD
	LD	BC,0
STLNLP::LD	A,(DE)
	AND	A
	JR	Z,STLNE
	INC	BC
	INC	DE
	JP	STLNLP
STLNE::	LD	E,C
	LD	D,B
	JP	PSHDE

STRCAT::PULB
	PULD
STCTL1::LD	A,(DE)
	AND	A
	JR	Z,STCTL2
	INC	DE
	JP	STCTL1
STCTL2::LD	A,(BC)
	AND	A
	RET	Z
	LD	(DE),A
	INC	DE
	INC	BC
	JP	STCTL2

; VDP OPERATIONS

WRVDPR::PUSH	BC
	LD	BC,(WRTVDP)
	LD	B,A
	INC	C
	DI
	OUT	(C),E
	OR	080H
	OUT	(C),A
	PUSH	HL
	LD	A,B
	CP	8
	JR	NC,WRVDPR1
	LD	HL,0F3DFH
	JR	WRVDPR2
WRVDPR1::CP	28
	JR	NC,WRVDPRT
	CP	24
	JR	C,$+4
	INC	A
	INC	A
	LD	HL,0FFE7H-8
WRVDPR2::ADD	A,L
	LD	L,A
	LD	(HL),E
WRVDPRT::POP	HL
	POP	BC
	RET

RDVDPR::PUSH	HL
	CP	8
	JR	NC,RDVDPR1
	LD	HL,0F3DFH
	JR	RDVDPR2
RDVDPR1::CP	28
	JR	NC,RDVDPER
	CP	24
	JR	C,$+4
	INC	A
	INC	A
	LD	HL,0FFE7H-8
RDVDPR2::ADD	A,L
	LD	L,A
	LD	A,(HL)
RDVDPRT::POP	HL
	RET
RDVDPER::XOR	A
	POP	HL
	RET

GETSTA7::LD	A,7		; NEED 'DI' BEFOR CALL GETSTA7
	JR	GETSTA
GETSTA2::LD	A,2
	DI
GETSTA::PUSH	BC
	PUSH	DE
	LD	BC,(WRTVDP)
	INC	C
	LD	D,C
	OUT	(C),A
	LD	A,08FH
	OUT	(C),A
	LD	BC,(RDVDP)
	INC	C
	IN	E,(C)
	LD	C,D
	XOR	A
	OUT	(C),A
	LD	A,08FH
	OUT	(C),A
	LD	A,E
	POP	DE
	POP	BC
	RET

WAITVDP::PUSH	AF
WVDPLP::CALL	GETSTA2
	EI
	RRCA
	JR	C,WVDPLP
	DI
	POP	AF
	RET

SSETUP::LD	A,(ARG)
	JR	XSETUP0

SETUP::	LD	C,0
	LD	HL,(NX)
	BIT	7,H
	JR	Z,SETUP1
	LD	A,L
	CPL
	LD	L,A
	LD	A,H
	CPL
	LD	H,A
	INC	HL
	SET	2,C		; XDIR
SETUP1:	LD	(PNX),HL
	LD	HL,(NY)
	BIT	7,H
	JR	Z,SETUP2
	LD	A,L
	CPL
	LD	L,A
	LD	A,H
	CPL
	LD	H,A
	INC	HL
	SET	3,C		; YDIR
SETUP2:	LD	(PNY),HL

XSETUP::LD	A,C
XSETUP0:LD	(PARG),A
	LD	HL,(SX)
	LD	(PSX),HL
	LD	HL,(DX)
	LD	(PDX),HL
	LD	HL,(SY)
	LD	A,(RDPAG)
	ADD	A,H
	LD	H,A
	LD	(PSY),HL
	LD	HL,(DY)
	LD	A,(WRPAG)
	ADD	A,H
	LD	H,A
	LD	(PDY),HL
	LD	A,(COL)
	LD	(PCOL),A
	CALL	WAITVDP
	DI
	LD	BC,(WRTVDP)
	INC	C
	LD	A,020H
	OUT	(C),A
	LD	A,091H
	OUT	(C),A
	LD	B,0EH
	LD	HL,PSX
	INC	C
	INC	C
	OTIR
	RET			; RETURN IN 'DI'

LSETUP::LD	C,0
	LD	DE,(NX)
	BIT	7,D
	JR	Z,LSTUP1
	LD	A,E
	CPL
	LD	E,A
	LD	A,D
	CPL
	LD	D,A
	INC	DE
	SET	2,C		; XDIR
LSTUP1::LD	HL,(NY)
	BIT	7,H
	JR	Z,LSTUP2
	LD	A,L
	CPL
	LD	L,A
	LD	A,H
	CPL
	LD	H,A
	INC	HL
	SET	3,C		; YDIR
LSTUP2::
	AND	A
	PUSH	HL
	SBC	HL,DE		; Y - X
	POP	HL
	JR	C,LSTUP3
	SET	0,C		; MAJ
	EX	DE,HL
LSTUP3::
	LD	(PNX),DE
	LD	(PNY),HL
	JP	XSETUP

GETNBL::LD	A,(NIBLE)
	BIT	7,A
	JR	NZ,GETNB1
	LD	HL,(GTPTR)
	LD	A,(HL)
	INC	HL
	LD	(GTPTR),HL
	LD	B,A
	AND	0FH
	OR	080H
	LD	(NIBLE),A
	LD	A,B
	RLCA
	RLCA
	RLCA
	RLCA
	AND	0FH
	RET
GETNB1::LD	B,A
	XOR	A
	LD	(NIBLE),A
	LD	A,B
	AND	0FH
	RET

PUTNBL::AND	0FH
	LD	B,A
	LD	A,(NIBLE)
	BIT	7,A
	JR	NZ,PUTNB1
	LD	A,B
	OR	080H
	LD	(NIBLE),A
	RET
PUTNB1::AND	0FH
	RLCA
	RLCA
	RLCA
	RLCA
	OR	B
	LD	HL,(GTPTR)
	LD	(HL),A
	INC	HL
	LD	(GTPTR),HL
	XOR	A
	LD	(NIBLE),A
	RET

LMMC::	LD	A,(CMD)
	AND	0FH
	OR	0B0H
	LD	(CMD),A
	XOR	A
	LD	(NIBLE),A
	CALL	GETNBL
	LD	(COL),A
	CALL	SETUP
	LD	A,(CMD)
	OUT	(C),A
LMMCLP::CALL	GETSTA2
	EI
	BIT	0,A
	JR	Z,LMMCRT
	AND	A
	JP	P,LMMCLP
	CALL	GETNBL
	LD	BC,(WRTVDP)
	INC	C
	DI
	OUT	(C),A
	LD	A,0ACH
	OUT	(C),A
	JR	LMMCLP
LMMCRT::RET

LMCM::	XOR	A
	LD	(NIBLE),A
	CALL	SETUP			; RETURN IN 'DI'
	CALL	GETSTA7
	LD	BC,(WRTVDP)
	INC	C
	LD	A,0A0H
	OUT	(C),A
	LD	A,0AEH
	OUT	(C),A
LMCMLP::CALL	GETSTA2
	PUSH	AF
	RLCA
	JR	NC,LMCM1
	CALL	GETSTA7
	CALL	PUTNBL
LMCM1::	EI
	POP	AF
	BIT	0,A
	JR	NZ,LMCMLP
	RET

LMMC8::	LD	HL,(GTPTR)
	LD	A,(HL)
	INC	HL
	PUSH	HL
	LD	(COL),A
	CALL	SETUP
	LD	A,(CMD)
	AND	0FH
	OR	0B0H
	OUT	(C),A
	POP	HL
	JP	HMMCLP
	
LMCM8::	CALL	SETUP
	CALL	GETSTA7
	LD	BC,(WRTVDP)
	INC	C
	LD	A,0A0H
	OUT	(C),A
	LD	A,0AEH
	OUT	(C),A
	LD	HL,(GTPTR)
LMCM8LP::CALL	GETSTA2
	PUSH	AF
	RLCA
	JR	NC,LMCM81
	CALL	GETSTA7
	LD	(HL),A
	INC	HL
LMCM81::EI
	POP	AF
	RRCA
	JR	C,LMCM8LP
	RET

HMMC::	LD	HL,(GTPTR)
	LD	A,(HL)
	INC	HL
	PUSH	HL
	LD	(COL),A
	CALL	SETUP
	LD	A,0F0H
	OUT	(C),A
	POP	HL
HMMCLP::CALL	GETSTA2
	EI
	BIT	0,A
	JR	Z,HMMCRT
	AND	A
	JP	P,HMMCLP
	LD	A,(HL)
	INC	HL
	LD	BC,(WRTVDP)
	INC	C
	DI
	OUT	(C),A
	LD	A,0ACH
	OUT	(C),A
	JR	HMMCLP
HMMCRT::RET

XLMMC::	PULD
	LD	(GTPTR),DE
	PUSH	HL
	CALL	LMMC
	POP	HL
	RET

XLMCM::	PULD
	LD	(GTPTR),DE
	PUSH	HL
	CALL	LMCM
	POP	HL
	RET

XLMMC8::PULD
	LD	(GTPTR),DE
	PUSH	HL
	CALL	LMMC8
	POP	HL
	RET

XLMCM8::PULD
	LD	(GTPTR),DE
	PUSH	HL
	CALL	LMCM8
	POP	HL
	RET

XLMMM::	PUSH	HL
	CALL	SETUP
	LD	A,(CMD)
	AND	0FH
	OR	090H
	OUT	(C),A
	EI
	POP	HL
	RET

XLMMV::	PUSH	HL
	CALL	SETUP
	LD	A,(CMD)
	AND	0FH
	OR	080H
	OUT	(C),A
	EI
	POP	HL
	RET

XHMMC::	PULD
	PUSH	HL
	LD	(GTPTR),DE
	CALL	HMMC
	POP	HL
	RET

XHMMM::	PUSH	HL
	CALL	SETUP
	LD	A,0D0H
	OUT	(C),A
	EI
	POP	HL
	RET

XHMMV::	PUSH	HL
	CALL	SETUP
	LD	A,0C0H
	OUT	(C),A
	EI
	POP	HL
	RET

XLINE::	PUSH	HL
	CALL	LSETUP
	LD	A,(CMD)
	AND	0FH
	OR	070H
	OUT	(C),A
	EI
	POP	HL
	RET

XPSET::	PUSH	HL
	CALL	SETUP
	LD	A,(CMD)
	AND	0FH
	OR	050H
	OUT	(C),A
	EI
	POP	HL
	RET

XPOINT::PUSH	HL
	CALL	SETUP
	LD	A,040H
	OUT	(C),A
	CALL	WAITVDP
	DI
	CALL	GETSTA7
	EI
	POP	HL
	LD	E,A
	LD	D,0
	RET

XSRCH::	PUSH	HL
	CALL	SSETUP
	LD	A,060H
	OUT	(C),A
	CALL	WAITVDP
	CALL	GETSTA2
	BIT	4,A
	JR	Z,SRCHE
	LD	A,8
	CALL	GETSTA
	LD	E,A
	LD	A,9
	CALL	GETSTA
	AND	1
	LD	D,A
	EI
	POP	HL
	RET
SRCHE::	EI
	POP	HL
	LD	DE,0FFFFH
	RET

GETRVA::LD	A,(RDPAG)
	JR	GETWV1

GETWVA::LD	A,(WRPAG)
GETWV1::LD	B,A
	LD	A,(0FCAFH) ; SCRMOD
	CP	7
	JR	C,$+4
	SLA	B
	SLA	B
	LD	A,D
	RLCA
	RLCA
	AND	03H
	ADD	A,B
	AND	07H
	RET

VSYNC::	PULD
	LD	A,E
	OR	D
	RET	Z
	CALL	GETSTA2
	EI
	BIT	6,A
	JR	NZ,VSYNL2	; IF ALREADY V-RETURN,THEN NEXT
VSYNL1::CALL	GETSTA2		; WHILE NOT V-RETURN
	EI
	BIT	6,A
	JR	Z,VSYNL1
	DEC	DE
	LD	A,E
	OR	D
	RET	Z
VSYNL2::CALL	GETSTA2		; WHILE V-RETURN
	EI
	BIT	6,A
	JR	NZ,VSYNL2
	JR	VSYNL1


LDIRVM::PULD
	CALL	GETWVA
	LD	BC,(WRTVDP)
	INC	C
	DI
	OUT	(C),A
	LD	(0FFEDH),A
	LD	A,08EH
	OUT	(C),A
	LD	A,D
	AND	03FH
	OUT	(C),E
	OR	040H
	OUT	(C),A
	DEC	C
	PULD
	PUSH	DE		; DE=COUNT
	PULD			; DE=SRC
	EX	(SP),HL		; SAVE PS,HL=COUNT
	EX	DE,HL
	LD	A,D
	AND	A
	JR	Z,LDVM1
LDVMLP::LD	B,0
	OTIR
	DEC	D
	JR	NZ,LDVMLP
LDVM1::	LD	A,E
	AND	A
	JR	Z,LDVM2
	LD	B,E
	OTIR
LDVM2::	EI
	POP	HL
	RET
	
LDIRMV::PULB
	PULD
	PUSH	BC	; DST ADDR
	PUSH	DE	; BYTES
	PULD
	CALL	GETRVA
	LD	BC,(WRTVDP)
	INC	C
	DI
	OUT	(C),A
	LD	(0FFEDH),A
	LD	A,08EH
	OUT	(C),A
	LD	A,D
	AND	03FH
	OUT	(C),E
	NOP
	NOP
	OUT	(C),A
	DEC	C
	POP	DE		; BYTES
	EX	(SP),HL		; DST ADDR
	LD	A,D
	AND	A
	JR	Z,LDMV1
LDMVLP::LD	B,0
	INIR
	DEC	D
	JR	NZ,LDMVLP
LDMV1::	LD	A,E
	AND	A
	JR	Z,LDMV2
	LD	B,E
	INIR
LDMV2::	EI
	POP	HL
	RET

FILVRM::PULD
	CALL	GETWVA
	LD	BC,(WRTVDP)
	INC	C
	DI
	OUT	(C),A
	LD	(0FFEDH),A
	LD	A,08EH
	OUT	(C),A
	LD	A,D
	AND	03FH
	OUT	(C),E
	OR	040H
	OUT	(C),A
	DEC	C
	PULD
	PUSH	DE
	PULD
	LD	B,E
	POP	DE
FILVLP::OUT	(C),B
	DEC	DE
	LD	A,E
	OR	D
	JR	NZ,FILVLP
	EI
	RET

SETDPG::LD	A,(0FCAFH)	; SCRMOD
	CP	5
	RET	C
	PUSH	BC
	PUSH	DE
	CP	8
	JR	NC,SETDP8
	LD	A,(DSPAG)
	AND	3		; SC5 OR SC6
	RRCA			; BIT 0,1 >> BIT 5,6
	RRCA
	RRCA
	OR	01FH
	LD	E,A
	JR	SETDPE
SETDP8::LD	E,01FH
	LD	A,(DSPAG)
	BIT	0,A
	JR	Z,SETDPE
	SET	5,E
SETDPE::LD	A,2
	CALL	WRVDPR
	POP	DE
	POP	BC
	RET

PALSTO::PULD
	LD	BC,(WRTVDP)
	INC	C
	DI
	OUT	(C),E
	LD	A,090H
	OUT	(C),A
	INC	C
	LD	A,(HL)		; PUL
	INC	HL
	OUT	(C),A
	LD	A,(HL)
	INC	HL
	OUT	(C),A
	EI
	RET

SETPAL::PULD
SETPAL0::LD	BC,(WRTVDP)
	INC	C
	XOR	A
	DI
	OUT	(C),A
	LD	A,090H
	OUT	(C),A
	INC	C
	LD	B,010H
SETPLP::LD	A,(DE)
	INC	DE
	OUT	(C),A
	LD	A,(DE)
	INC	DE
	OUT	(C),A
	DJNZ	SETPLP
	EI
	RET

VDPSTO::PULB
	PULD
	LD	A,C
	AND	03FH
	CALL	WRVDPR
	EI
	RET

VDPFET::PULD
	LD	A,E
	AND	03FH
	CALL	RDVDPR
	EI
	LD	E,A
	LD	D,0
	RET

VDPSFET::PULD
	LD	A,E
	DI
	CALL	GETSTA
	EI
	LD	E,A
	LD	D,0
	RET

VCSTO::	PULD
	CALL	GETWVA
	LD	BC,(WRTVDP)
	INC	C
	DI
	OUT	(C),A
	LD	(0FFEDH),A
	LD	A,08EH
	OUT	(C),A
	LD	A,D
	AND	03FH
	OUT	(C),E
	OR	040H
	OUT	(C),A
	DEC	C
	LD	A,(HL)		; PULA
	INC	HL
	INC	HL
	OUT	(C),A
	EI
	RET
	
VSTO::	PULD
	CALL	GETWVA
	LD	BC,(WRTVDP)
	INC	C
	DI
	OUT	(C),A
	LD	(0FFEDH),A
	LD	A,08EH
	OUT	(C),A
	LD	A,D
	AND	03FH
	OUT	(C),E
	OR	040H
	OUT	(C),A
	DEC	C
	LD	A,(HL)
	OUT	(C),A
	INC	HL
	LD	A,(HL)
	OUT	(C),A
	EI
	INC	HL
	RET
	
VFET::	PULD
	CALL	GETRVA
	LD	BC,(WRTVDP)
	INC	C
	DI
	OUT	(C),A
	LD	(0FFEDH),A
	LD	A,08EH
	OUT	(C),A
	LD	A,D
	AND	03FH
	OUT	(C),E
	NOP
	NOP
	OUT	(C),A
	NOP
	DEC	C
	IN	E,(C)
	NOP
	NOP
	IN	D,(C)
	EI
	RET

VCFET::	PULD
	CALL	GETRVA
	LD	BC,(WRTVDP)
	INC	C
	DI
	OUT	(C),A
	LD	(0FFEDH),A
	LD	A,08EH
	OUT	(C),A
	LD	A,D
	AND	03FH
	OUT	(C),E
	NOP
	NOP
	OUT	(C),A
	LD	D,0
	DEC	C
	IN	E,(C)
	EI
	RET

XXBDOS::PULD
	LD	A,E
	LD	(REGC),A
	LD	DE,5
	JP	XCALL+4

; RELOCATER	( ADDR --- )

NOTXRL::POP	DE
	POP	HL
	LD	DE,M_NOTR
	JP	XXERR
M_NOTR::DB	'NOTXRL',0

RELOC::	PULD
	PUSH	HL		; SAVE PS
	PUSH	DE
	LD	C,E		; CODE TOP
	LD	B,D
	POP	IX
	LD	A,(DE)
	CP	'X'
	JR	NZ,NOTXRL
	INC	DE
	LD	A,(DE)
	CP	'R'
	JR	NZ,NOTXRL
	INC	DE
	EX	DE,HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	ADD	IX,DE		; [IX]=ORGLOC
	LD	E,(IX)		; DE=ORGLOC
	INC	IX
	LD	D,(IX)
	INC	IX
	LD	L,C		; HL=CODE TOP
	LD	H,B
	AND	A
	SBC	HL,DE		; HL=CODE TOP - ORGLOC

	LD	C,L
	LD	B,H
RELCLP:	LD	L,(IX)
	INC	IX
	LD	H,(IX)
	INC	IX
	LD	A,L
	OR	H
	JR	Z,RELOC1
	ADD	HL,BC
	LD	E,(HL)		; GET OPERAND
	INC	HL
	LD	D,(HL)
	EX	DE,HL
	ADD	HL,BC		; ADD OFFSET
	EX	DE,HL
	LD	(HL),D
	DEC	HL
	LD	(HL),E
	JP	RELCLP
RELOC1::POP	HL
	RET

EOD::

CMPTOP::DB	'XR'
	DW	RLCTBL-CMPTOP

IBSIZE	EQU	1024
IBUF::	DS	IBSIZE
EOIB::	DW	IBUF
ICP::	DW	IBUF
EOFFLG::DB	0

LINCNT::DW	0
WBUF::	DS	33
INCOMP::DB	0
DPLIM::	DW	CMPXA-1
CSP::	DW	0
MAKING::DW	0
HDP::	DW	RLCTBL
LATEST::DW	LFA9999
BRKENA::DB	1
LPCHK::	DB	1
SUS1::	DB	0		; 1 PARAM SUSPEND
SUS2::	DB	0		; 2 PARAMS SUSPEND
SUS2V::	DW	0
SUSJSF::DB	0		; JSR SUSPEND
SUSJSA::DW	0
SUSSTF::DB	0		; STRING SUSPEND
NUMFLG::DB	0
WFLAG::	DB	0
OPTFLG::DB	0
DATAWM::DB	0
LATVST::DW	0
LATPRM::DW	0
UNGETF::DB	0
IFCBFL::DB	0
ZEQFLG::DB	0		; FOR 0= IF{ OPTIMIZE

MOUTB::	LD	A,(DE)
	CALL	CHPUT
	INC	DE
	DJNZ	MOUTB
	RET

FLSDE::
RL1001::LD	A,(SUS1)
FLSDE1::AND	A
	RET	Z
	DEC	A
	LD	A,0
RL1002::LD	(SUS1),A
	JR	NZ,PSHBCC
PSHDEC::LD	DE,PSHDE
RL1003::JP	PUTCOD4
PSHBCC::
RL1004::LD	DE,PSHBC
RL1005::JP	PUTCOD4

PRM0::
RL1006::CALL	FLSDE
RL1010::LD	A,(SUS2)
	AND	A
	RET	Z
PRM0_22::
RL1013::CALL	REALBC
RL1014::CALL	PSHBCC
CLRS12::XOR	A
RL1015::LD	(SUS1),A
RL1016::LD	(SUS2),A
	RET

PRM1::				; FOR 1 PARAMETER WORD
RL1020::LD	A,(SUS2)
	AND	A
	JR	NZ,PRM1_2
RL1021::LD	A,(SUS1)
	AND	A
	RET	Z
RL1023::JP	FIXDE1
PRM1_2::
RL1025::CALL	FLSDE
RL1027::LD	A,(SUS2)
	CP	4
	JR	NC,PRM1_3
RL10271::JP	REALDE
PRM1_3::XOR	A
RL1028::LD	(SUS2),A
	INC	A
RL1029::LD	(SUS1),A
	JR	FIXDE2

PRM2::				; FOR 2 PARAMETERS WORD
RL1030::LD	A,(SUS2)
	AND	A
	JR	NZ,PRM2_2
RL1031::LD	A,(SUS1)
	AND	A
	RET	Z
PRM2_0::DEC	A
	RET	NZ
	LD	DE,0424BH
RL1033::JP	DECOM

PRM2_2::CP	4
	RET	NC
RL1040::CALL	FIXDE
RL1041::JP	REALBC

FIXDE::	
RL1050::LD	A,(SUS1)
FIXDE1::CP	2
	RET	NZ
FIXDE2::LD	DE,05059H	; LD E,C LD D,B
RL1051::JP	DECOM

SETS11:	LD	A,1
SETS1::
RL1052::LD	(SUS1),A
	XOR	A
RL1053::LD	(SUS2),A
	RET
SETS12::LD	A,2
	JR	SETS1

RSLVBC::
RL1060::CALL	FLSJSR
RL1061::LD	A,(SUS2)
	AND	A
	RET	Z
RL1063::CALL	FLSDE

REALDE::
RL1070::LD	A,(SUS2)
	AND	A
	RET	Z
	CP	4		; SUS2>3 ALREADY OPTIMIZED
	JR	NC,SETS12
REALDE1::DEC	A		; BC SUSPENDED
	JR	NZ,REALD1	; A<>1:VAR
	LD	A,011H		; LITERAL:LD DE,XXXX
RL1071::CALL	ACOM
RL10711::CALL	SUSSTR
	JR	REALD2
REALD1::LD	DE,05BEDH	; VAR:  LD DE,(XXXX)
RL1072::CALL	DECOM
REALD2::
RL5000::LD	DE,(SUS2V)	; VALUE OF SUS2
RL1074::CALL	DECOM
RL1075::LD	A,(SUS2)	; ?BYTE
	CP	3
	JR	C,SETS11
	LD	DE,00016H	; LD D,0
RL1076::CALL	DECOM
	JR	SETS11

REALBC::
RL1080::LD	A,(SUS2)
	AND	A
	RET	Z
	CP	4		; SYS2>4 ALREADY REALIZED
	JR	NC,SETS12	; 2 -> SUS1  0 -> SUS2
REALBC1::DEC	A
	JR	NZ,REALB1	; SUS2=1:LITERAL
	LD	A,01H		; LD BC,XXXX
RL1081::LD	(NUMFLG),A	; SET NUMFLG=1
RL10810::CALL	ACOM
RL10811::CALL	SUSSTR
	JR	REALB2
REALB1::LD	DE,04BEDH	; SUS2=2:VAR ; LD BC,(XXXX)
RL1082::CALL	DECOM
REALB2::
RL5001::LD	DE,(SUS2V)
RL1084::CALL	DECOM
RL1085::LD	A,(SUS2)
	CP	3
	RET	C
	LD	A,2
RL1086::LD	(NUMFLG),A
	LD	DE,00006H	; LD B,0
RL1087::JP	DECOM

QNUMCH::CP	03AH
	RET	NC
	CP	030H
	JR	C,CLRCY
	SUB	030H
	SCF
	RET

QHEXCH::
RL1090::CALL	QNUMCH
	RET	C
	CP	041H
	JR	C,CLRCY
	CP	047H
	JR	C,QHEXC1
	CP	061H
	JR	C,CLRCY
	CP	067H
	RET	NC
	SUB	020H
QHEXC1::SUB	037H
	SCF
	RET
CLRCY::	AND	A
	RET


LCHKON::LD	A,1
	JR	STLCHK

LCHKOF::XOR	A
RL00001::
STLCHK:	LD	(LPCHK),A
	JR	STBRC1

BRKON::	LD	A,1
	JR	STBRKC

BRKOFF::XOR	A
RL00002::
STBRKC:	LD	(BRKENA),A
STBRC1::
RL0001::JP	QEXEC

GETCHR::PUSH	HL
	PUSH	DE
	PUSH	BC
RL0002::LD	A,(EOFFLG)
	AND	A
	JR	NZ,EOF
RL0003::LD	HL,(ICP)
RL4000::LD	DE,(EOIB)
	LD	A,D
	CP	H
	JR	NZ,GETCH1
	LD	A,E
	CP	L
	JR	NZ,GETCH1
RL0004::LD	DE,IBUF
RL4001::LD	(ICP),DE
RL0005::LD	HL,IBUF+IBSIZE
RL0006::LD	(EOIB),HL
	LD	C,01AH
	CALL	BDOS
	LD	DE,INFCB
	LD	HL,IBSIZE
	LD	C,027H
	CALL	BDOS
	AND	A
	JR	Z,GETCH0
	LD	A,L
	OR	H
	JR	Z,EOF
RL0007::LD	DE,IBUF
	ADD	HL,DE
RL00071::LD	(EOIB),HL
RL0008::
GETCH0::LD	HL,IBUF
GETCH1::LD	A,(HL)
	INC	HL
RL0009::LD	(ICP),HL
	CP	01AH
	JR	Z,EOF
	CP	0AH
	JR	NZ,GETCH2
RL0010::LD	HL,(LINCNT)
	INC	HL
RL0011::LD	(LINCNT),HL
GETCH2::POP	BC
	POP	DE
	POP	HL
	RET
EOF::	LD	A,1
RL0012::LD	(EOFFLG),A
	POP	BC
	POP	DE
	POP	HL
	LD	A,020H
	RET
	
GETWRD::
RL00131::LD	A,(UNGETF)
	AND	A
	JR	Z,GETWR1
	XOR	A
RL00132::LD	(UNGETF),A
	RET
GETWR1::PUSH	HL
RL0013::CALL	PGETWRD
	POP	HL
RL0014::LD	A,(WBUF)
	CP	02H
	RET	NZ
RL0015::LD	A,(WBUF+1)	; CHECK COMMENT FOR IN BYTEDATA
	CP	02FH		; '/'
	RET	NZ
RL0016::LD	A,(WBUF+2)
	CP	02AH		; '*'
	RET	NZ
RL0018::
REM::	LD	A,(EOFFLG)
	AND	A
RL0019::JP	NZ,ABNTER
RL0020::CALL	GETCHR
	CP	'*'
	JR	NZ,REM
RL0021::CALL	GETCHR
	CP	'/'
	JR	NZ,REM
RL0022::JP	GETWRD

UNGETW::LD	A,1
RL00220::LD	(UNGETF),A
	RET

RL0023::
PGETWRD::LD	A,(EOFFLG)
	AND	A
	JR	NZ,GETWEX
RL0024::CALL	GETCHR
	CP	021H
	JR	C,PGETWRD
RL0025::LD	HL,WBUF+1
	LD	B,0
GETWLP::LD	(HL),A
	INC	B
	INC	HL
	CP	022H
	JR	Z,GETWRT
	LD	A,B
	CP	31
	JR	Z,SKPW
RL0026::CALL	GETCHR
	CP	021H
	JR	C,GETWRT
	JR	GETWLP
SKPW::	PUSH	BC
RL0027::
SKPWLP::CALL	GETCHR
	CP	021H
	JR	NC,SKPWLP
	POP	BC
GETWRT::LD	A,B
RL0028::
GETWRT2::LD	(WBUF),A
	RET
GETWEX::XOR	A
	JR	GETWRT2

RL0029::
OGETWRD::CALL	GETWRD
RL0030::LD	A,(WBUF)
	AND	A
	RET	NZ
RL0031::
ABNTER::LD	DE,M_ABNT
RL0032::JP	SERROR

GETSCN::
RL00321::CALL	OGETWRD

SCNWRD::PUSH	HL		; SAVE PS
RL0033::LD	HL,(LATEST)
SCNWLP::LD	E,(HL)		; LINK
	INC	HL
	LD	D,(HL)
	INC	HL
	INC	HL		; SKIP OPTIMIZE
	INC	HL		; SKIP FLAG
	LD	B,(HL)		; LEN
	INC	HL
RL0034::LD	A,(WBUF)
	CP	B
	JR	NZ,NEXTW
	PUSH	DE		; SAVE LINK
RL0035::LD	DE,WBUF+1
SCNWL2::
	LD	A,(DE)
	CP	(HL)
	JR	NZ,NEXTW1
	INC	DE
	INC	HL
	DJNZ	SCNWL2
	POP	DE		; FOUND,DISPOZE LINK
	LD	E,L		; DE=BODY ADDR.
	LD	D,H
	LD	C,(HL)		; BC=EXEC ADDR.
	INC	HL
	LD	B,(HL)
	POP	HL		; RESTORE PS
	LD	A,1
	AND	A		; RETURN ZFLG=0
	RET
NEXTW1::
	POP	DE		; RESTORE LINK
NEXTW::	LD	A,D		; LINK=0:END
	OR	E
	JR	Z,SCNWNF
	LD	H,D		; NEXT WORD
	LD	L,E
	JR	SCNWLP
SCNWNF::POP	HL		; RETURN ZFLG=1
	XOR	A
	RET

GETFND::
RL00351::CALL	OGETWRD
RL0036::
FIND::	CALL	SCNWRD
RL0037::JP	Z,WHAT
	JP	PSHDE

QNUM::	PUSH	HL
RL0038::LD	HL,WBUF
	LD	B,(HL)
	INC	HL
	LD	DE,0
	LD	C,E	; SIGN
	LD	A,(HL)
	CP	027H	; '
	JR	Z,CCONST
	CP	'-'
	JR	NZ,QNUM1
	DEC	C	; MINUS
	INC	HL
	DEC	B
	LD	A,(HL)
QNUM1::	CP	'$'
	JR	Z,GETHEX
RL0039::CALL	QNUMCH
	JR	NC,NOTNUM
	LD	E,A
	INC	HL
	DEC	B
	JR	Z,QNUMRT
QNUMLP::PUSH	HL
	LD	H,D
	LD	L,E
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,HL
	EX	DE,HL
	POP	HL
	LD	A,(HL)
RL0040::CALL	QNUMCH
	JR	NC,NOTNUM
	ADD	A,E
	LD	E,A
	JR	NC,$+3
	INC	D
	INC	HL
	DJNZ	QNUMLP
QNUMRT::POP	HL
	BIT	7,C
	CALL	NZ,NEGATE+4
QNUMR1::CALL	PSHDE
	LD	A,1
	AND	A
	RET
GETHEX::INC	HL
	DEC	B
	JR	Z,NOTNUM
GETHXLP::LD	A,(HL)
RL0041::CALL	QHEXCH
	JR	NC,NOTNUM
	EX	DE,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	EX	DE,HL
	ADD	A,E
	LD	E,A
	JR	NC,$+3
	INC	D
	INC	HL
	DJNZ	GETHXLP
	JR	QNUMRT
CCONST::LD	A,L
	LD	D,H
	ADD	A,B	; DE=HL+B
	LD	E,A
	JR	NC,$+3
	INC	D
	DEC	DE
	LD	A,(DE)
	CP	027H	; CHECK LAST CHAR='
	JR	NZ,NOTNUM
	LD	A,B
	CP	3	; LENGTH CHECK
	JR	C,NOTNUM
	CP	5
	JR	NC,LONGCH
	INC	HL
	LD	E,(HL)
	LD	D,0
	CP	3
	JR	Z,CCONS1
	INC	HL
	LD	D,(HL)
CCONS1::POP	HL
	JR	QNUMR1
NOTNUM::POP	HL
	XOR	A
	RET

QNUMCN::
RL0042::CALL	QNUM
	RET	NZ
RL0043::CALL	SCNWRD
RL0044::JP	Z,UNEXP
	PUSH	BC
RL0045::CALL	HEADLP
	INC	DE		; OPT
	LD	A,(DE)		; WFLAG
	POP	BC
	BIT	1,A		; CONST BIT
RL0046::JP	Z,UNEXP
	PSHB
	RET

RL0050::
WHAT::	LD	DE,M_WHAT
	JR	ERROR
LONGCH::POP	HL
RL0051::LD	DE,M_LNGC

ERROR::	PUSH	HL
	PUSH	DE
	CALL	RESSCR
RL0052::LD	DE,M_LINO
	CALL	MESOUT
RL4010::LD	DE,(LINCNT)
	CALL	OUTDEC
	CALL	SPACE
	POP	DE
	CALL	MESOUT
	POP	HL
	LD	A,022H
	CALL	CHPUT
RL0053::LD	DE,WBUF+1
RL0054::LD	A,(WBUF)
	LD	B,A
	AND	A
RL00541::CALL	NZ,MOUTB
	LD	A,022H
	CALL	CHPUT
RL0055::LD	HL,(MAKING)
	LD	A,L
	OR	H
	JR	Z,ERREND
RL0056::LD	DE,M_ERRW
	CALL	MESOUT
RL0057::LD	HL,(MAKING)
	INC	HL
	INC	HL
	INC	HL
	INC	HL
	LD	B,(HL)
	INC	HL
	EX	DE,HL
RL0058::CALL	MOUTB
ERREND::JP	0

RL0059::
NOARG::	LD	DE,M_NOARG
	JR	SERROR
RL0060::
FNOTF::	LD	DE,M_FNOTF
	JR	SERROR

; ERROR IN STARTUP

SERROR::PUSH	DE
	CALL	RESSCR
	POP	DE
	CALL	MESOUT
	JP	0

RL0061::
OUTMEM::LD	DE,M_OUTM
	JR	SERROR

STARTX::LD	A,(7)		; CHECK TPA SIZE
	CP	0C0H
	JR	C,OUTMEM
	LD	HL,CMPTOP	; TRANSFER CMPTOP
	LD	DE,CMPXA
	LD	BC,EOC-CMPTOP
	LDIR
	LD	HL,(PS)
	LD	DE,CMPXA
	CALL	PSHDE
	CALL	RELOC
	
	LD	HL,START1
	LD	DE,CMPXA-CMPTOP
	ADD	HL,DE
	JP	(HL)

START1::
	LD	A,(080H)	; CHECK ARGUMENT
	AND	A
RL0070::JP	Z,NOARG
	LD	DE,INFCB
	XOR	A
	LD	(CURBLK),A
	LD	C,0FH
	CALL	BDOS		; OPEN
	AND	A
RL0072::JP	NZ,FNOTF
	LD	HL,0
	LD	(RNDREC),HL	; RESET RECORD POS
	LD	(RNDREC+2),HL
	INC	HL
	LD	(RECSIZ),HL	; RECORD SIZE=1(BYTE)
RL0073::LD	HL,IBUF
RL0074::LD	(ICP),HL	; CLEAR INPUT BUFF
RL0075::LD	(EOIB),HL
	LD	HL,(PS)
TOPLEV::LD	SP,(06H)	; RETURN STACK=END OF TPA
RL0080::CALL	TOEXEC		; DIRECT MODE

RL0081::
EXELP::	CALL	GETWRD
RL0082::LD	A,(WBUF)
	AND	A
RL0083::JP	Z,TOPEND	; IF DETECT EOF THEN END
RL00831::LD	A,(HDP+1)
	CP	H
RL00832::JP	NC,OUTM3
RL0084::CALL	QNUM		; ?NUM
	JR	NZ,EXELP
TOPLV1::
RL0086::CALL	FIND		; ?DEFINED WORD
RL0087::CALL	HEADLP
	LD	A,(DE)
RL00871::LD	(OPTFLG),A
	INC	DE
	LD	A,(DE)
RL0088::LD	(WFLAG),A

	AND	A
RL0091::JP	M,EXELV4	; MSB:VAR BIT
	BIT	1,A
RL0092::JP	NZ,EXELV5	; CONST BIT
	BIT	5,A
	JR	NZ,EXELV6	; ARRAY BIT
TOPLV3::CALL	FETCH
	CALL	JSR+4
RL0093::LD	A,(OPTFLG)
	BIT	3,A		; PSHDE SUSPEND
	CALL	NZ,PSHDE
RL0094::LD	A,(INCOMP)
	AND	A
	JR	Z,EXELP
	JR	CMPLP

EXELV4::CALL	FETCH		; ADDR OF VAR
	CALL	FETCH+4		; VALUE OF VAR
	CALL	PSHDE

RL0095::LD	A,(WFLAG)
	BIT	6,A		; BYTE?
	JR	Z,EXELV40
	INC	HL
	LD	(HL),0		; UPPER=0
	DEC	HL
EXELV40::JR	EXELP

EXELV5::CALL	FETCH		; GET VALUE
	CALL	PSHDE
	JR	EXELP

EXELV6::
	CALL	DUP
RL00950::CALL	HEADLP
	INC	DE		; SKIP OPT
	LD	A,(DE)
	BIT	6,A
	JR	NZ,EXELV61
	CALL	FETCH		; GET TOP OF ARRAY
	PUSH	DE
	LD	DE,IAFET	; INT MODE
	JR	EXELV62
EXELV61::CALL	FETCH		; GET TOP OF ARRAY
	PUSH	DE
	LD	DE,BAFET	; BYTE MODE
EXELV62::CALL	PSHDE
	POP	DE		; TOP OF ARRAY
	CALL	PSHDE
	LD	DE,K_ARY
	CALL	PSHDE
RL00951::CALL	GETSCN
RL00953::JP	Z,UNEXP
	PUSH	HL
RL00954::LD	HL,LBOXP
	AND	A
	SBC	HL,BC
	POP	HL
RL00955::JP	NZ,UNEXP
RL00956::JP	EXELP

CMPLV5::CALL	FETCH
	CALL	PSHDE
	JR	CMPNUM

CMPLP::	
RL0100::CALL	GETWRD
RL01001::LD	A,(WBUF)
	AND	A
RL01002::JP	Z,TOPEND	; IF DETECT EOF THEN END
RL01003::LD	A,(DPLIM+1)
	LD	C,A
	LD	A,(DP+1)
	CP	C
RL01004::JP	NC,OUTM2
RL01005::LD	A,(HDP+1)
	CP	H
RL01006::JP	NC,OUTM3
RL0103::CALL	QNUM		; ?NUM
	JR	Z,CMPLV1
CMPNUM::XOR	A
RL0104::LD	(LATVST+1),A
RL01040::LD	(NUMFLG),A
RL01041::CALL	FLSJSR		; FLSJSR NOT USE DE
RL0105::CALL	OPTNUM		; DE=VALUE
	AND	A
RL0106::CALL	Z,PUTNUMC
	JR	CMPLP
CMPLV1::
RL0107::CALL	FIND		; ?DEFINED WORD
RL0108::CALL	HEADLP
	LD	A,(DE)
RL0109::LD	(OPTFLG),A
	EX	AF,AF'
	INC	DE
	LD	A,(DE)
RL0110::LD	(WFLAG),A
	AND	A
RL01100::JP	M,CMPLV4	; MSB:VAR BIT
	BIT	5,A
RL01101::JP	NZ,CMPLV6	; ARRAY BIT
	XOR	A
RL01102::LD	(LATVST+1),A
	LD	A,(DE)
	BIT	1,A
	JR	NZ,CMPLV5	; CONST BIT

	EX	AF,AF'		; OPTFLG
	BIT	2,A		; PULBC SKIP BIT
	JR	Z,CMPLV10

	RRCA			; NON AUTO
	JR	C,CMPLV2
RL01104::CALL	FLSJSR
RL0112::CALL	PRM2
	JR	CMPLV2

CMPLV10::
RL01123::LD	A,(OPTFLG)
	BIT	1,A		; PULDE SKIP FLAG
	JR	Z,CMPLV11
	BIT	4,A		; DON'T FLSJSR BIT
RL01124::CALL	Z,FLSJSR
RL01125::CALL	PRM1
	JR	CMPLV2

CMPLV11::BIT	4,A		; DON'T FLSJSR BIT ; FOR CLSSTR
	JR	NZ,CMPLV2
RL01126::CALL	FLSJSR
RL01127::CALL	PRM0

CMPLV2::
RL01128::LD	A,(WFLAG)
	RRCA
	JR	C,CMPLV3	; LSB:IMMED BIT
	CALL	FETCH
RL01152::LD	A,(OPTFLG)
	BIT	2,A		; SKIP PULBC FLAG
	JR	Z,CMPL201
	
RL01153::LD	A,(SUS2)
	AND	A
	JR	Z,CMPL201	; NO SUSPENDED
	INC	DE
	INC	DE
	INC	DE
	INC	DE
	XOR	A
RL01155::LD	(SUS2),A
CMPL201::

RL0116::LD	A,(SUS1)
	AND	A
	JR	Z,CMPLV21
RL0117::LD	A,(OPTFLG)
	BIT	1,A		; SKIP PULDE FLAG
	JR	Z,CMPLV21
	INC	DE
	INC	DE
	INC	DE
	INC	DE
CMPLV21::
RL0118::CALL	DEJSRC
CMPLV22::
RL0119::LD	A,(OPTFLG)
	RRCA			; SUS1 NON-AUTO BIT
	JR	C,CMPLV24
	AND	04H		; PSHDE SUSPEND BIT
	RRCA
	RRCA
CMPLV23::
RL0120::LD	(SUS1),A
RL01200::LD	A,(ZEQFLG)
	AND	A
	JR	NZ,CMPLV25
CMPLV24::
	XOR	A
CMPLV242::
RL01201::LD	(NUMFLG),A
CMPLV25::
RL01202::LD	A,(INCOMP)
	AND	A
RL01203::JP	NZ,CMPLP
RL01204::JP	EXELP

CMPLV3::CALL	FETCH
	CALL	JSR+4		;+
	JR	CMPLV22		;+

CMPLV4::
RL01210::CALL	RSLVBC
	CALL	FETCH		; ADDR OF VAR
	PUSH	HL
RL01211::LD	HL,(LATVST)
	XOR	A
	SBC	HL,DE
RL01212::LD	(LATVST+1),A
	POP	HL
	JR	Z,CMPLV42
RL01213::LD	A,(SUS1)
	AND	A
	JR	NZ,CMPLV43
	PUSH	DE
	LD	DE,05BEDH	; LD DE,()
RL01214::CALL	DECOM
	POP	DE
RL0122::CALL	DECOM
RL0123::LD	A,(WFLAG)
	BIT	6,A		; BIT 6=0:INT
	JR	Z,CMPLV42
	LD	DE,00016H	; LD D,0
RL0124::CALL	DECOM
	LD	A,2
RL01240::LD	(NUMFLG),A
	DEC	A
RL01241::LD	(SUS1),A
	JR	CMPLV25
CMPLV42::LD	A,1
	JR	CMPLV23
CMPLV43::			; DE SUSPENDED
	PUSH	DE
RL01242::CALL	FIXDE1
RL01243::CALL	SETS11
	POP	DE
RL01244::LD	A,(WFLAG)	; BYTE OR INT
	OR	080H
	RLCA
	RLCA
RL01245::LD	(SUS2),A
RL4120::LD	(SUS2V),DE
	RRCA			; BYTE/INT -> CFLG
	JR	NC,CMPLV24	; IF INT,GOTO CMPLV24
	LD	A,2
	JR	CMPLV242	; BYTE

CMPLV6::

RL0130::CALL	FLSJSR
RL0131::CALL	PRM0
	CALL	FETCH		; TOP OF ARRAY
	PUSH	DE
RL0133::LD	A,(WFLAG)
	BIT	6,A
	JR	NZ,CMPLV61
	LD	DE,IAFET
	JR	CMPLV62
CMPLV61::LD	DE,BAFET
CMPLV62::CALL	PSHDE
	POP	DE
	CALL	PSHDE
	LD	DE,K_ARY
	CALL	PSHDE
	XOR	A
RL01340::CALL	GETSCN
RL01342::JP	Z,UNEXP
	PUSH	HL
RL01343::LD	HL,LBOXP
	XOR	A
	SBC	HL,BC
	POP	HL
RL01344::JP	NZ,UNEXP
RL01345::JP	CMPLV23

OPTNUM::			; DE=VALUE
	LD	A,D
	AND	A
	JR	NZ,OPT11N
	LD	A,E
	AND	A
	JR	Z,OPT11N
	CP	7
	JR	NC,OPT11N
NOPTX::	PUSH	AF		; *1
RL01351::CALL	GETSCN
	PUSH	HL		; *2
	JR	Z,NOPT1N
	LD	HL,PLUS
	AND	A
	SBC	HL,BC
	JR	Z,OPTINC
	LD	HL,MINUS
	AND	A
	SBC	HL,BC
	JR	Z,OPTDEC
NOPT1N::POP	HL		; POP *2
	EX	(SP),HL		; PUSH *2,DISPOSE *1
RL01352::LD	A,(SUS2)
	AND	A
	JR	Z,OPTNE1
	JR	OPT11N1

OPTINC::LD	A,013H		; INC DE
	JR	OPTIN1
OPTDEC::LD	A,01BH		; DEC DE
OPTIN1::EX	AF,AF'		; SAVE OP.CODE TO A'
	POP	HL
	INC	HL		; DISPOSE VALUE ON PS
	INC	HL
RL01353::LD	A,(SUS2)
	AND	A
	JR	Z,OPTIN11
RL01354::CALL	FIXDE
RL01355::CALL	REALBC
	LD	A,4
RL01356::LD	(SUS2),A
	POP	AF		; LOOP TIMES (*1)
	LD	B,A
	EX	AF,AF'		; RELOAD OP.CODE FROM A'
	RES	4,A		; INC/DEC BC
	JR	OPTIN2
OPTIN11::
RL01357::LD	A,(SUS1)
	AND	A
RL01358::CALL	Z,PULDEC
RL01359::CALL	FIXDE
	POP	AF
	LD	B,A		; LOOP TIMS
	EX	AF,AF'		; RELOAD OP.CODER FROM A'
OPTIN2::PUSH	HL
	LD	HL,(DP)
OPTIN3::LD	(HL),A
	INC	HL
	DJNZ	OPTIN3
	LD	(DP),HL
	POP	HL

	LD	A,1
RL0135A::LD	(SUS1),A
	RET

OPT11N::			; VALUE > 6
RL0136::LD	A,(SUS2)
	AND	A
	RET	Z
RL01361::CALL	GETSCN
	JR	Z,OPTNE
	PUSH	HL
	LD	HL,PLUS
	AND	A
	SBC	HL,BC
	JR	Z,OPTPLS
	LD	HL,MINUS
	AND	A
	SBC	HL,BC
	JR	Z,OPTMIN
OPT11N1::LD	HL,XAND
	AND	A
	SBC	HL,BC
	JR	Z,OPTAND
	LD	HL,XOR
	AND	A
	SBC	HL,BC
	JR	Z,OPTOR
	LD	HL,XXOR
	AND	A
	SBC	HL,BC
	JR	Z,OPTXOR
OPTNE1::POP	HL
OPTNE::
RL01362::CALL	UNGETW
	XOR	A
	RET

OPTPLS::POP	HL
	LD	BC,0CEC6H	; ADD A,xx ; ADC A,xx
	JR	OPTPL1
OPTMIN::POP	HL
	LD	BC,0DED6H	; SUB xx ; SBC A,xx
	JR	OPTPL1
OPTAND::POP	HL
	LD	BC,0E6E6H	; AND xx ; AND A,xx
	JR	OPTPL1
OPTOR::POP	HL
	LD	BC,0F6F6H	; OR xx ; OR A,xx
	JR	OPTPL1
OPTXOR::POP	HL
	LD	BC,0EEEEH	; XOR xx ; XOR A,xx
OPTPL1::PUSH	BC
RL01363::CALL	FIXDE
RL01364::LD	A,(SUS2)
	CP	4
RL01365::CALL	C,REALBC1
	POP	BC
	LD	A,4
RL01366::LD	(SUS2),A
	CALL	PULDE		; VALUE
	LD	A,079H		; LD A,C
RL01367::CALL	ACOM
	LD	A,C		; INSTRUCTION
RL01368::CALL	ACOM
	LD	A,E		; VALUE LOW
RL01369::CALL	ACOM
	LD	A,04FH		; LD C,A
RL0136A::CALL	ACOM
	LD	A,D		; VALUE HIGH=0 ?
	AND	A
	JR	Z,OPTNL1
OPTNLH::LD	A,078H		; LD A,B
RL01370::CALL	ACOM
	LD	A,B		; INSTRUCTION
RL01371::CALL	ACOM
	LD	A,D		; VALUE HIGH
RL01372::CALL	ACOM
	LD	A,047H		; LD B,A
OPTNL2::
RL01373::CALL	ACOM
OPTNLE::LD	A,1
	RET

OPTNL1::LD	A,B		; INSTRUCTION
	CP	0F6H		; OR
	JR	Z,OPTNLE
	CP	0EEH		; XOR
	JR	Z,OPTNLE
	CP	0E6H		; AND
	JR	NZ,OPTNLH
	LD	A,06H		; LD B,0
RL01374::CALL	ACOM
	XOR	A
	JR	OPTNL2

RL0140::
TOPEND::LD	A,(INCOMP)	; EOF DETECTED
	AND	A
RL0141::JP	NZ,ABNTER	; IF IN COMPLIE THEN ERROR
RL0142::LD	HL,(MAKING)
	LD	A,L
	OR	H
RL0143::JP	NZ,ABNTER
	JP	EXIT

OUTM2::	
RL4121::LD	DE,M_OUTM2
J_OUTM::
RL01442::JP	J_ERR0
OUTM3::	
RL4122::LD	DE,M_OUTM3
	JR	J_OUTM

MKCOM::	
RL0150::CALL	QEXEC
RL0151::CALL	GETFND
	LD	C,010H
	LD	DE,INFCB
	PUSH	HL
	LD	HL,05452H	; 'RT'
	LD	(M_OP2),HL
	CALL	BDOS
	CALL	RESSCR
	LD	HL,04F43H	; 'CO'
	LD	(INFCB+9),HL
	LD	HL,0004DH	; 'M\0'
	LD	(INFCB+11),HL
	LD	DE,INFCB
	LD	C,016H
	CALL	BDOS
	POP	HL
	AND	A
	JR	NZ,SAVEERR
	CALL	FETCH		; MAIN WORD BODY ADDRESS
	LD	(START0+1),DE
	LD	DE,0100H
	LD	C,01AH
	CALL	BDOS
	LD	HL,0
	LD	(RNDREC),HL
	LD	(RNDREC+2),HL
	INC	HL
	LD	(RECSIZ),HL
	LD	HL,(DP)
	LD	DE,0FF00H
	ADD	HL,DE		; HL=HL-0100H
	LD	DE,INFCB
	LD	C,026H
	CALL	BDOS
	PUSH	AF
	LD	DE,INFCB
	LD	C,010H
	CALL	BDOS
	AND	A
	JR	NZ,SAVEERR
	POP	AF
	AND	A
	JR	NZ,SAVEERR
	JP	0
RL0153::
SAVEERR::LD	DE,M_SAVER
RL0154::JP	SERROR

; ASSEMBRY PARTS FOR COMPILER

FLSJSR::
RL01550::LD	A,(SUSJSF)
	AND	A
	RET	Z
	PUSH	HL
	LD	HL,(DP)
	LD	(HL),0CDH
	INC	HL
RL01551::LD	A,(SUSJSA)
	LD	(HL),A
	INC	HL
RL01552::LD	A,(SUSJSA+1)
	LD	(HL),A
	INC	HL
	LD	(DP),HL
	POP	HL
	XOR	A
RL01553::LD	(SUSJSF),A
	RET

DEJSRC::
RL4223::LD	(SUSJSA),DE
	LD	A,1
RL01554::LD	(SUSJSF),A
	RET

XCOMM::
RL0158::CALL	QEXEC
COMM::	CALL	PULDE
DECOM::	PUSH	HL
	LD	HL,(DP)
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(DP),HL
	POP	HL
	RET

XCCOM::
RL0159::CALL	QEXEC
CCOM::	LD	A,(HL)		; PULA
	INC	HL
	INC	HL
ACOM::	PUSH	HL
	LD	HL,(DP)
	LD	(HL),A
	INC	HL
	LD	(DP),HL
	POP	HL
	RET
JPCOM::	LD	A,0C3H
	JR	ACOM

DELDDEC::LD	A,011H
RL0161::CALL	ACOM
RL01611::CALL	SUSSTR
	JR	DECOM

PULBCC::
RL01612::LD	DE,PULBC
	JR	PUTCOD4
PULDEC::LD	DE,PULDE
PUTCOD4::LD	B,4
PUTCOD::PUSH	HL
	LD	HL,(DP)
PUTCDL::LD	A,(DE)
	LD	(HL),A
	INC	HL
	INC	DE
	DJNZ	PUTCDL
	LD	(DP),HL
	POP	HL
	RET

DROP::
RL0162::LD	A,(INCOMP)
	AND	A
	JR	NZ,DROPC
	INC	HL
	INC	HL
	RET
DROPC::
RL01621::LD	A,(SUS2)
	AND	A
	JR	Z,DROP1
	XOR	A
RL01622::LD	(SUS2),A
	RET
DROP1::
RL01623::
	LD	A,(SUS1)
	AND	A
	JR	Z,DROP2
	XOR	A
RL01624::LD	(SUS1),A
	RET
DROP2::	LD	DE,02323H	; INC HL ; INC HL
RL01625::JP	DECOM

; GET HEAD ADDRESS IN DE

HEAD::	CALL	PULDE
HEADLP::DEC	DE
	LD	A,(DE)
	CP	020H
	JR	NC,HEADLP
	DEC	DE
	DEC	DE
	RET

; FOR COMPILER

PULBC::	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	INC	HL
	RET

PSHBC::	DEC	HL
	LD	(HL),B
	DEC	HL
	LD	(HL),C

CREATE::
RL0170::CALL	GETSCN
RL0171::JP	NZ,DOUBLE
XCREAT::PUSH	HL
RL0172::LD	HL,(HDP)
	PUSH	HL
RL4011::LD	DE,(LATEST)
	LD	(HL),E			; MAKE LINK
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(HL),0			; OPTIMIZE
	INC	HL
	LD	(HL),0			; FLAG
	INC	HL
RL0173::LD	DE,WBUF
	LD	A,(DE)			; LENGTH OF NAME
	INC	DE
	LD	(HL),A
	INC	HL
	LD	C,A			; NAME
	LD	B,0
	EX	DE,HL
	LDIR
	LD	HL,(DP)			; DP
	EX	DE,HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
RL0174::LD	(HDP),HL
	POP	HL
RL0175::LD	(LATEST),HL
	POP	HL
	RET

COLON::
RL0176::CALL	QEXEC
RL4012::LD	DE,(MAKING)
	LD	A,E
	OR	D
RL01761::JP	NZ,CNEST
RL4013::LD	DE,(HDP)
RL4014::LD	(MAKING),DE
RL0177::CALL	CREATE
RL0178::LD	(CSP),HL
RL01781::CALL	GETSCN
	JR	Z,COLON10
	PUSH	HL
RL01784::LD	HL,PARAM
	AND	A
	SBC	HL,BC
	POP	HL
	JR	Z,COLON2
COLON10::
RL01785::CALL	UNGETW
COLON11::
RL01786::JP	CLEND2
COLON2::
RL01787::CALL	VAR
RL4130::LD	IX,(MAKING)
RL01788::CALL	IXVADR
	LD	E,(IX+0)
	LD	D,(IX+1)
	PUSH	HL
RL01789::LD	HL,(LATEST)
RL0178A::LD	(LATPRM),HL
	LD	HL,(DP)
	AND	A
	SBC	HL,DE
	EX	DE,HL
	POP	HL
	SRL	D
	RR	E
	LD	A,E
	OR	D
	JR	Z,COLON11	; NO PARAMETER
	
	PUSH	DE
COLV0::
RL0178B::CALL	GETSCN
	JR	Z,COLV1
	PUSH	HL
RL0178C::LD	HL,VAR
	AND	A
	SBC	HL,BC
	POP	HL
	JR	NZ,COLV1
RL0178D::CALL	VAR
	JR	COLV0
COLV1::	
RL0178E::CALL	UNGETW
	POP	DE

RL4132::LD	IX,(MAKING)
RL0179::CALL	IXVADR
	LD	BC,(DP)
	LD	(IX+0),C	; SET EXEC ADDR
	LD	(IX+1),B

RL4133::LD	IX,(LATPRM)
	PUSH	HL		; SAVE PS
	LD	A,D
	AND	A
	JR	NZ,COLON3
	LD	A,E
	CP	1
	JR	Z,COLON4

COLON3::
RL01791::CALL	IXVADR
	PUSH	DE		; PUSH VARCOUNT
RL01792::LD	DE,PULBC
RL0180::CALL	PUTCOD4
RL01801::CALL	PULDEC
	LD	DE,043EDH	; LD (XXXX),BC
RL01802::CALL	DECOM
	LD	E,(IX+0)
	LD	D,(IX+1)
RL01803::CALL	DECOM		; VAR ADDR
	LD	E,(IY+0)
	LD	D,(IY+1)
	PUSH	DE
	POP	IX
RL01804::CALL	IXVADR
	LD	DE,053EDH
RL01805::CALL	DECOM
	LD	E,(IX+0)
	LD	D,(IX+1)
RL4134::LD	(LATVST),DE
RL01806::CALL	DECOM
RL01807::LD	HL,(MAKING)
	INC	HL
	INC	HL
	LD	A,06H		; SKIP PULDE & PULBC
	OR	(HL)
	LD	(HL),A
	LD	E,(IY+0)
	LD	D,(IY+1)
	PUSH	DE
	POP	IX
	POP	DE		; POP VARCOUNT
	DEC	DE		; VARCOUNT -2
	DEC	DE

COLON4::LD	A,E		; VARCOUNT=0?
	OR	D
	JR	Z,COLEND
	PUSH	DE
RL0181::CALL	IXVADR
RL01811::CALL	PULDEC
	LD	DE,053EDH
RL01812::CALL	DECOM
	LD	E,(IX+0)
	LD	D,(IX+1)
RL4135::LD	(LATVST),DE
RL01813::CALL	DECOM
	LD	E,(IY+0)
	LD	D,(IY+1)
	PUSH	DE
	POP	IX
	POP	DE
	DEC	DE
	JR	COLON4

COLEND::
RL0182::LD	HL,(MAKING)
	INC	HL
	INC	HL
	LD	A,02H		; SKIP PULDE BIT
	OR	(HL)
	LD	(HL),A
	POP	HL		; POP PS
	JR	CLEND4

CLEND2::
RL01821::CALL	GETSCN
	JR	Z,CLEND3
	PUSH	HL
RL01823::LD	HL,VAR
	AND	A
	SBC	HL,BC
	POP	HL
	JR	NZ,CLEND3

RL01824::CALL	VAR
RL4136::LD	IX,(MAKING)
RL01825::CALL	IXVADR
	LD	BC,(DP)
	LD	(IX+0),C	; SET EXEC ADDR
	LD	(IX+1),B
	JR	CLEND4
CLEND3::
RL01826::CALL	UNGETW
CLEND4::
RL01827::JP	TOCOMP

IXVADR::PUSH	IX
	POP	IY
	LD	C,(IX+4)	; LEN
	INC	C		; SKIP LINK
	INC	C
	INC	C		; SKIP OPTFLG
	INC	C		; SKIP WFLAG
	INC	C
	LD	B,0
	ADD	IX,BC		; SKIP NAME
	RET

CNEST::
RL0183::LD	DE,M_CNES
J_ERR0::
RL01831::JP	ERROR
SEMERR::
RL01982::LD	DE,M_SEME
	JR	J_ERR0

SEMI::
RL4020::LD	DE,(MAKING)
	LD	A,E
	OR	D
	JR	Z,SEMERR
RL01970::CALL	QCOMP
RL4021::LD	(LATEST),DE
RL01971::LD	A,(SUS2)
	AND	A
	JR	Z,SEMI_2
RL01972::LD	A,(SUS1)
	AND	A
	JR	NZ,SEMI_1
RL01973::CALL	FIXDE1
	JR	SEMI_2
SEMI_1::
RL01974::CALL	RSLVBC

SEMI_2::
RL01975::LD	A,(SUSJSF)
	AND	A
	JR	Z,SEMI01
	XOR	A
RL01976::LD	(SUSJSF),A
	PUSH	HL
	LD	HL,(DP)
RL4022::LD	DE,(SUSJSA)
	LD	(HL),0C3H
	INC	HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(DP),HL
	POP	HL
	JR	SEMI02
	
SEMI01::LD	A,0C9H
RL01977::CALL	ACOM
SEMI02::
RL01978::LD	A,(SUS1)
	AND	A
	JR	Z,SEMI1
RL01979::CALL	FIXDE1
RL4023::LD	DE,(MAKING)
	INC	DE		; SKIP LINK
	INC	DE
	LD	A,(DE)
	OR	8		; SET SUS1 BIT
	LD	(DE),A
SEMI1::	LD	DE,0
RL4024::LD	(MAKING),DE
RL4025::LD	DE,(CSP)
	AND	A
	PUSH	HL
	SBC	HL,DE
	POP	HL
RL01980::JP	NZ,COMERR

	PUSH	HL
RSLSTL::
RL4026::LD	DE,(DPLIM)
	LD	HL,CMPXA-1
	AND	A
	SBC	HL,DE
	JR	Z,RSLSTE
	EX	DE,HL
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)		; DE=SUSPENDED ADDR
	LD	BC,(DP)
	EX	DE,HL
	LD	(HL),C
	INC	HL
	LD	(HL),B
	EX	DE,HL		; HL=DPLIM
	LD	E,C		; DE=DP
	LD	D,B
	INC	HL
	LD	C,(HL)
	INC	HL
	LD	B,(HL)		; BC=BYTES
	INC	HL		; HL=SRC STR
	LDIR
	DEC	HL
RL01981::LD	(DPLIM),HL
	LD	(DP),DE
	JR	RSLSTL
RSLSTE::POP	HL

	JR	TOEXEC

PARAM::
RL01983::JP	UNEXP

TOEXEC::XOR	A
	JR	STINCP

TOCOMP::LD	A,1
STINCP::
RL01985::LD	(INCOMP),A
	RET

RL01986::
QCOMP::	LD	A,(INCOMP)
	AND	A
	RET	NZ
	JR	PHAERR

RL01987::
QEXEC::	LD	A,(INCOMP)
	AND	A
	RET	Z
PHAERR::
RL01988::LD	DE,M_MDER
RL01989::
J_ERR1::JP	ERROR

RL01990::
COMERR::LD	DE,M_COME
	JR	J_ERR1
DOUBLE::LD	DE,0
RL4030::LD	(MAKING),DE
RL01999::LD	DE,M_DBL
	JR	J_ERR1

IMPADR::
RL02000::LD	DE,M_IMPA
	JR	J_ERR1
INVARY::
RL02001::LD	DE,M_NALC2
	JR	J_ERR1

TICK::
RL0200::CALL	GETFND
RL02011::CALL	HEADLP
	INC	DE		; SKIP OPTFLG
	LD	A,(DE)
	BIT	0,A		; IMMED
	JR	NZ,IMPADR
	BIT	1,A		; CONST
	JR	NZ,IMPADR
	BIT	4,A		; V-ARRAY
	JR	Z,TICK2
RL02012::LD	A,(INCOMP)
	AND	A
	JR	Z,INVARY
RL02013::CALL	RSLVBC
RL02014::LD	A,(SUS1)
	AND	A
	JR	NZ,TICK1
	LD	DE,05BEDH
RL02015::CALL	DECOM
	CALL	FETCH
RL02016::JP	DECOM

TICK1::	CALL	FETCH
	LD	A,2		; SUS VAR
	JR	PUTN22

TICK2::	BIT	5,A		; ARRAY BIT
	JR	Z,TICK3
	CALL	FETCH		; ARRAY HANDLE
	CALL	FETCH+4		; TOP OF ARRAY
	JR	TICK4

TICK3::	CALL	FETCH
TICK4::	CALL	PSHDE
PUTNUM::
RL0202::LD	A,(INCOMP)
	AND	A
	RET	Z
PUTNUMC::
RL0203::CALL	RSLVBC
RL0204::LD	A,(SUS1)
	AND	A
	JR	NZ,PUTN2
	LD	A,1
RL0206::LD	(SUS1),A
RL02061::LD	(NUMFLG),A
	CALL	PULDE
RL0205::JP	DELDDEC

PUTN2::	
	CALL	PULDE
	LD	A,1		; 1:CONST SUSPEND
PUTN22::
RL0207::LD	(SUS2),A
RL4200::LD	(SUS2V),DE
	RET

ZBRN::	
RL02100::LD	A,(SUS1)
	AND	A
	JR	Z,ZBRN1
RL02101::LD	A,(ZEQFLG)
	AND	A
	JR	NZ,NZBRN1
ZBRN1::
	XOR	A
RL02102::LD	(ZEQFLG),A
RL0210::CALL	CSETZ
	LD	A,0CAH
RL0211::JP	ACOM

NZBRN::
RL02120::LD	A,(SUS1)
	AND	A
	JR	Z,NZBRN1
RL02121::LD	A,(ZEQFLG)
	AND	A
	JR	NZ,ZBRN1
NZBRN1::
	XOR	A
RL02122::LD	(ZEQFLG),A
RL0212::CALL	CSETZ
	LD	A,0C2H
RL0213::JP	ACOM

CSTZBV::PUSH	HL
	LD	HL,(DP)
	DEC	HL		; BACK TO LD D,0
	DEC	HL
	DEC	HL		; OPERAND OF LD DE,()
	LD	D,(HL)
	DEC	HL
	LD	E,(HL)
	DEC	HL		; BACK TO LD DE,()
	DEC	HL
	LD	(HL),03AH	; LD A,()
	INC	HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(HL),0B7H	; OR A
	INC	HL
	LD	(DP),HL
	POP	HL
	XOR	A
RL02130::LD	(SUS1),A
	RET

CSETZ::	
RL02131::LD	A,(NUMFLG)
	CP	2
	JR	Z,CSTZBV
RL02132::LD	A,(SUS1)
	AND	A
	JR	Z,CSETZ2
	DEC	A
	JR	NZ,CSETZ11
	LD	DE,0B27BH	; LD A,E ; OR D
	JR	CSETZ12
CSETZ11::LD	DE,0B079H	; LD A,C ; OR B
CSETZ12::
RL02133::CALL	DECOM
	XOR	A
RL02134::LD	(SUS1),A
	RET
CSETZ2::
RL02135::LD	DE,SETZ
RL02136::JP	PUTCOD4
	
SETZ::	LD	A,(HL)
	INC	HL
	OR	(HL)
	INC	HL

CHKBRC::
RL0214::LD	A,(BRKENA)
	AND	A
	RET	Z
	LD	DE,CHKBRK
	JR	XDEJSC

RL0215::
CHKLPC::LD	A,(LPCHK)
	AND	A
	RET	Z
	LD	DE,CHKLOP
XDEJSC::
RL0216::CALL	DEJSRC
RL0217::JP	FLSJSR

DP2P::	LD	DE,(DP)
	INC	DE
	INC	DE
	LD	(DP),DE
	RET

CMPZEQ::
RL02181::CALL	GETSCN
	PUSH	AF
RL02182::CALL	UNGETW
	POP	AF
	JR	Z,CZEQ1
	PUSH	HL
RL02183::LD	HL,IF
	AND	A
	SBC	HL,BC
	POP	HL
	JR	NZ,CZEQ1
RL02184::LD	A,(SUS1)
	AND	A
	JR	Z,CZEQ1
	LD	A,1
RL02185::LD	(ZEQFLG),A
	RET
CZEQ1::	
	LD	DE,ZEQ
RL02186::LD	A,(SUS1)
	AND	A
	JR	Z,CZEQ2
	INC	DE
	INC	DE
	INC	DE
	INC	DE
CZEQ2::
RL02187::JP	DEJSRC

RL0220::
IF::	CALL	QCOMP

RL02200::CALL	GETSCN
	JR	Z,IF1
	PUSH	HL
RL02203::LD	HL,CONT
	AND	A
	SBC	HL,BC
	JR	Z,IFCONT
RL02204::LD	HL,BREAK
	AND	A
	SBC	HL,BC
	JR	Z,IFBRK
	POP	HL
IF1::
RL02205::CALL	UNGETW
RL0221::CALL	ZBRN
	LD	DE,(DP)
	CALL	PSHDE
RL0222::CALL	DP2P
	LD	DE,K_IF
	JP	PSHDE

IFCONT::POP	HL
	LD	DE,0
	CALL	PSHDE
	LD	DE,K_NIF
	CALL	PSHDE
RL02225::CALL	CHKBRC
	LD	A,1
RL02226::LD	(IFCBFL),A
RL02227::CALL	NZBRN
RL02228::JP	CONT

IFBRK::	POP	HL
	LD	DE,0
	CALL	PSHDE
	LD	DE,K_NIF
	CALL	PSHDE
	LD	A,1
RL0222F::LD	(IFCBFL),A
RL0222G::CALL	NZBRN
RL0222H::JP	BREAK


QPAIR::	LD	A,(HL)
	CP	E
	JR	NZ,STRERR
	INC	HL
	LD	A,(HL)
	CP	D
	JR	NZ,STRERR
	INC	HL
	RET
RL0223::
STRERR::LD	DE,M_STRE
RL0224::JP	ERROR

RL0230::
ELSE::	CALL	QCOMP
RL0231::CALL	BBLIF
	CP	K_NIF
	JR	NZ,ELSE1
	LD	DE,K_NIF
	JP	PSHDE

ELSE1::	CP	K_IF
RL02312::JP	NZ,STRERR
RL0232::CALL	JPCOM
RL0233::CALL	DP2P
	CALL	PULDE
	PUSH	HL
	LD	HL,(DP)
	EX	DE,HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	POP	HL
	DEC	DE
	DEC	DE
	CALL	PSHDE
	LD	DE,K_IF
	JP	PSHDE

RL0240::
BEGIN::	CALL	QCOMP
RL0241::LD	A,(LPCHK)
	AND	A
	JR	Z,BEGIN1
	LD	A,0E5H		; PUSH	HL
RL0242::CALL	ACOM
BEGIN1::LD	DE,(DP)
	CALL	PSHDE		; LOOP TOP
	LD	DE,K_LOP
	CALL	PSHDE
RL0243::JP	CHKLPC

DOWHIL::
RL0250::CALL	QCOMP
RL0251::CALL	FNDLPK
	PUSH	DE		; LOOP TOP ADDR PTR
RL0252::CALL	CHKBRC
RL0253::CALL	NZBRN
	POP	DE		; LOOP TOP ADDR PTR
	LD	BC,(DP)
	LD	A,(DE)
	INC	DE
	LD	(BC),A
	INC	BC
	LD	A,(DE)
	LD	(BC),A
	INC	BC
	LD	(DP),BC
RL0255::CALL	RSLVBR
RL02551::CALL	CHKLPC
RL0256::LD	A,(LPCHK)
	AND	A
	RET	Z
	LD	A,0D1H		; POP	DE
RL0257::JP	ACOM

RL0270::
WHILE::	CALL	QCOMP
RL0271::LD	A,(LPCHK)
	AND	A
	JR	Z,WHILE1
	LD	A,0E5H
RL0272::CALL	ACOM
WHILE1::LD	DE,(DP)
	CALL	PSHDE
	LD	DE,K_WHL
	CALL	PSHDE
RL0273::JP	CHKLPC

RL0280::
DO::	CALL	QCOMP
	LD	DE,K_WHL
RL0281::CALL	QPAIR
	LD	DE,K_LOP
	CALL	PSHDE
RL0282::CALL	ZBRN
	LD	DE,(DP)
	CALL	PSHDE
RL0284::CALL	DP2P
	LD	DE,K_BRK
	JP	PSHDE

CLSSTR::
RL0290::CALL	QCOMP
CLST0::
RL0291::CALL	BBLIF
	CP	K_IF
	JR	NZ,CLST1
ENDIFX::CALL	PULDE
	PUSH	HL
	PUSH	DE
	LD	HL,(DP)
	XOR	A
	SBC	HL,DE
	CP	H		; OFFSET HIGH=0 ?
	JR	NZ,EIFX2
	LD	A,L
	CP	2		; OFFSET LOW=2 ?
	JR	NZ,EIFX2 
RL02911::LD	A,(SUSJSF)	; JSR SUSPENDED ?
	AND	A
	JR	Z,EIFX2
	EX	DE,HL		; OPERAND -> HL
	DEC	HL
	LD	A,(HL)		; OPCODE
	AND	0F7H
	CP	0C2H		; JUMP ?
	JR	NZ,EIFX2
	LD	A,(HL)
	XOR	0EH		; INVERSE Z/NZ & CHANGE JP -> CALL
	LD	(HL),A
	INC	HL		; OPERAND ADDR
RL4201::LD	DE,(SUSJSA)	; SUSPENDED CALL ADDR
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(DP),HL
	POP	DE
	POP	HL
	XOR	A
RL02912::LD	(SUSJSF),A
	RET

EIFX2::	
RL02913::CALL	FLSJSR
RL02914::CALL	PRM0
	POP	DE
	LD	HL,(DP)
	EX	DE,HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	POP	HL
	RET

CLST1::	PUSH	AF
RL02915::CALL	FLSJSR
RL02916::CALL	PRM0
	POP	AF
	CP	K_NIF
	JR	NZ,RSLVIF
	INC	HL		; DISPOSE DUMMY
	INC	HL
	RET

RSLVIF::CP	K_EIF
	JR	NZ,ENDLOP
RL02920::CALL	ENDIFX
	JR	CLST0

ENDLOP::
RL02921::CALL	FNDLPK
	PUSH	DE
RL0293::CALL	CHKBRC
	POP	DE
RL0294::CALL	JPCOM			; JMP TO LOOP TOP
	LD	BC,(DP)
	LD	A,(DE)
	INC	DE
	LD	(BC),A
	INC	BC
	LD	A,(DE)
	LD	(BC),A
	INC	BC
	LD	(DP),BC

ENDWX::
RL0296::CALL	RSLVBR
RL02961::CALL	CHKLPC
RL0297::LD	A,(LPCHK)
	AND	A
	RET	Z
	LD	A,0D1H		; POP	DE ; DISPOSE STACK CHECK
RL0298::JP	ACOM

RSLVBL::LD	DE,(DP)		; RESOLVE BREAK
RL0299::CALL	PULBC
	LD	A,E
	LD	(BC),A
	INC	BC
	LD	A,D
	LD	(BC),A
RSLVBR::LD	E,(HL)
	INC	HL
	LD	A,(HL)
	INC	HL
	AND	A
RL02941::JP	NZ,STRERR
	LD	A,E
RSLVB2::CP	K_BRK
	JR	Z,RSLVBL
	CP	K_NIF
	JR	NZ,RSLVB1
RSLVB3::INC	HL		; DISPOSE NULL IF
	INC	HL
	JR	RSLVBR
RSLVB1::CP	K_LOP
RL02942::JP	NZ,STRERR
	INC	HL
	INC	HL
	RET

BBLIF::	PUSH	HL
RL4039::LD	BC,(CSP)
BBLIFL::LD	A,H		; IF PS >= CSP THEN FNDLPE
	CP	B
	JR	C,BBLIF1
	JR	NZ,BBLIFE
	LD	A,L
	CP	C
	JR	NC,BBLIFE
BBLIF1::LD	E,(HL)
	INC	HL
	LD	A,(HL)
	INC	HL
	AND	A
	JR	NZ,BBLIFE	; NOT KANGOUFU THEN BBLIFE
	LD	A,E
	CP	K_LOP
	JR	Z,BBLIFE
	CP	K_BRK
	JR	Z,BBLIF2
	CP	K_NIF
	JR	Z,BBLIFX
	CP	K_IF
	JR	Z,BBLIFX
	CP	K_EIF
	JR	Z,BBLIFX
BBLIF2::INC	HL
	INC	HL
	JR	BBLIFL
BBLIFX::POP	BC		; SAVED PS
	PUSH	BC
	PUSH	AF		; KANGOUFU
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	PUSH	DE		; SUSPENDED ADDR OF IF
	LD	E,L		; XFER ADDR
	LD	D,H
	DEC	HL
	DEC	HL
	DEC	HL
	DEC	HL
	PUSH	HL		; XFER SRC ADDR
	AND	A
	SBC	HL,BC		; CALC DATA BYTES
	LD	C,L
	LD	B,H
	POP	HL		; XFER SRC ADDR
	LD	A,C
	OR	B
	JR	Z,BBLIF9
	DEC	HL
	DEC	DE
	LDDR
	INC	DE		; NEW PS
BBLIF9::
	EX	DE,HL
	POP	DE		; SUSPENDED ADDR OF IF
	CALL	PSHDE
	POP	AF		; KANGOUFU
	POP	HL
	INC	HL
	INC	HL
	RET
BBLIFE::XOR	A
	POP	HL
	RET

FNDLPK::PUSH	HL
RL4040::LD	BC,(CSP)
FNDLPL::LD	A,H		; IF PS >= CSP THEN FNDLPE
	CP	B
	JR	C,FNDLP1
	JR	NZ,FNDLPE
	LD	A,L
	CP	C
	JR	NC,FNDLPE
FNDLP1::LD	E,(HL)
	INC	HL
	LD	A,(HL)
	INC	HL
	AND	A
	JR	NZ,FNDLPE	; NOT KANGOUFU THEN FNDLPE
	LD	A,E
	CP	K_LOP
	JR	Z,FNDLPR
	CP	K_BRK
	JR	Z,FNDLP2
	CP	K_NIF
	JR	Z,FNDLP2
	CP	K_EIF
	JR	Z,FNDLP2
	CP	K_IF
	JR	NZ,FNDLPE
FNDLP2::INC	HL
	INC	HL
	JR	FNDLPL
FNDLPR::LD	E,L
	LD	D,H
	POP	HL
	RET
FNDLPE::POP	HL
RL03020::JP	STRERR

CHKIFC::			; CHECK IF{ CLOSE
RL03021::CALL	GETSCN
	JR	Z,CHKIC2
	PUSH	HL
RL03023::LD	HL,CLSSTR
	AND	A
	SBC	HL,BC
	JR	Z,CHKICE
RL03024::LD	HL,ELSE
	AND	A
	SBC	HL,BC
	JR	Z,CHKICE
RL03025::LD	HL,ELSEIF
	AND	A
	SBC	HL,BC
	JR	Z,CHKICE
	POP	HL
RL03026::
CHKIC2::JP	UNEXP
CHKICE::
	POP	HL
RL03027::JP	UNGETW

RL0310::
CONT::	CALL	QCOMP
RL03101::CALL	CHKIFC
RL0311::CALL	FNDLPK
RL03120::LD	A,(IFCBFL)
	AND	A
	JR	NZ,CONT0
	PUSH	DE
RL0312::CALL	CHKBRC
RL0313::CALL	JPCOM
	POP	DE
CONT0::	LD	BC,(DP)		; RESOLVE LOOP TOP ADDR
	LD	A,(DE)
	LD	(BC),A
	INC	BC
	INC	DE
	LD	A,(DE)
	LD	(BC),A
	INC	BC
	LD	(DP),BC
	XOR	A
RL03130::LD	(IFCBFL),A
	RET

RL0320::
BREAK::	CALL	QCOMP
RL03201::CALL	CHKIFC
RL03203::CALL	FNDLPK
	LD	DE,(DP)
RL0321::LD	A,(IFCBFL)
	AND	A
	JR	NZ,BREAK1
	LD	A,0C3H
	LD	(DE),A
	INC	DE
BREAK1::CALL	PSHDE
	INC	DE
	INC	DE
	XOR	A
RL0322::LD	(IFCBFL),A
	LD	(DP),DE
	LD	DE,K_BRK
	JP	PSHDE

ELSEIF::
RL0330::CALL	BBLIF
	CP	K_NIF
	JR	NZ,ELIF2
	INC	HL		; DISPOSE DUMMY
	INC	HL
	RET

ELIF2::	CP	K_IF
RL03302::JP	NZ,STRERR
RL03303::CALL	JPCOM
RL03304::CALL	DP2P
	CALL	PULDE		; IF SUSPENDED
	PUSH	HL
	LD	HL,(DP)
	EX	DE,HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	POP	HL
	DEC	DE
	DEC	DE
	CALL	PSHDE
	LD	DE,K_EIF
	JP	PSHDE

A_LPA::	NOP
A_RPA::	RET
LBOXP::	
RL0335::JP	UNEXP

RBXSTE::
RL03350::JP	STRERR

RBOXP::
RL03351::LD	A,(INCOMP)
	AND	A
	JR	NZ,RBOXPC
	CALL	SWAP		; SWAP INDEX <--> K_ARY
	CALL	PULDE
	LD	A,D
	AND	A
	JR	NZ,RBXSTE
	LD	A,E		
	CP	K_ARY
	JR	NZ,RBXEX1
	LD	A,8		; DE SUSPEND BIT
RL03352::LD	(OPTFLG),A
	JR	RBXEX2
RBXEX1::CP	K_ARYS
	JR	NZ,RBXSTE
RBXEX2::CALL	PULDE		; INDEX
	PULB			; ARRAY TOP
	PUSH	DE
	CALL	PULDE		; EXE ADDR
	INC	DE		; SKIP PULBC & PULDE
	INC	DE
	INC	DE
	INC	DE
	INC	DE
	INC	DE
	INC	DE
	INC	DE
	PUSH	DE
	POP	IX
	POP	DE
	JP	(IX)		; EXEC ARRAY ACESS ROUTINE
RBOXPC::
	CALL	PULDE
	LD	A,D
	AND	A
	JR	NZ,RBXSTE
	LD	A,E
	CP	K_ARY
	JR	NZ,RBXPC1
	LD	A,8
RL0336::LD	(OPTFLG),A
	JR	RBXPC2
RBXPC1::CP	K_ARYS
	JR	NZ,RBXSTE

RBXPC2::
RL03361::CALL	RSLVBC
RL03362::CALL	REALDE
	LD	A,01H		; LD BC,XXXX
RL03363::CALL	ACOM
RL03364::CALL	SUSSTR
RL03365::CALL	COMM		; ARRAY ADDR
	CALL	PULDE		; EXEC ADDR
	INC	DE		; SKIP PULBC
	INC	DE
	INC	DE
	INC	DE
RL03366::LD	A,(SUS1)
	AND	A
	JR	Z,$+6
	INC	DE
	INC	DE
	INC	DE
	INC	DE
RL03367::JP	DEJSRC


; BEGIN OF MEMORY ALLOCATION

RL0400::
BEGALC::LD	A,(INCOMP)
	AND	A
	RET	Z
RL0401::CALL	JPCOM
	LD	DE,(DP)
	CALL	PSHDE
RL0402::JP	DP2P

; END OF MEMORY ALLOCATION

RL0403::
ENDALC::LD	A,(INCOMP)
	AND	A
	RET	Z
	CALL	PULDE
	PUSH	HL
	LD	HL,(DP)
	EX	DE,HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	POP	HL
	RET


; END OF STRING & DATA

ENDSTR::CALL	PULDE		; BEGIN ADDR
	PUSH	HL
	LD	HL,(DP)		; END ADDR
	PUSH	HL		; #1
	AND	A
	SBC	HL,DE		; CALC BYTES (DP-BEGIN)
	POP	DE		; END ADDR #1
	LD	C,L		; BYTES -> BC
	LD	B,H
	JR	Z,ENDAE		; IF BYTES=0,GOTO ENDAE
RL04032::LD	A,(INCOMP)
	AND	A
	JR	Z,ENDAE
	PUSH	BC		; BYTES
RL04033::LD	HL,(DPLIM)
	DEC	DE
	EX	DE,HL		; HL=END ADDR,DE=DPLIM
	LDDR
	POP	BC		; BYTES
	INC	HL
	LD	(DP),HL
	EX	DE,HL		; DE=DPLIM
	LD	(HL),B		; PUT BYTES
	DEC	HL
	LD	(HL),C
	DEC	HL
RL04034::LD	(DPLIM),HL
	LD	A,1
RL04035::LD	(SUSSTF),A

ENDAE::	POP	HL
	RET			; RETURN BC=BYTES

SUSSTR::			; SUSPEND STRING
RL04036::LD	A,(SUSSTF)
	AND	A
	RET	Z
	XOR	A
RL04037::LD	(SUSSTF),A
RL04038::LD	(NUMFLG),A	; SAVE CURRENT DP TO HIMEM
	PUSH	HL
	PUSH	DE
	LD	DE,(DP)
RL04039::LD	HL,(DPLIM)
	LD	(HL),D
	DEC	HL
	LD	(HL),E
	DEC	HL
RL0403A::LD	(DPLIM),HL
	POP	DE
	POP	HL
	RET

RL0410::
VAR::	CALL	BEGALC
RL0411::
VARLP::	CALL	GETSCN
	JR	NZ,VARRT
RL0413::CALL	XCREAT
RL4050::LD	DE,(LATEST)
	INC	DE		; SKIP LINK
	INC	DE
	INC	DE		; SKIP OPTFLAG
	LD	A,(DE)
	OR	080H		; SET VAR BIT
	LD	(DE),A
	LD	DE,0
RL0414::CALL	DECOM
	JR	VARLP
VARRT::	PUSH	HL
RL0415::LD	HL,A_RPA
	AND	A
	SBC	HL,BC
	POP	HL
RL0416::JP	NZ,DOUBLE
RL0417::JP	ENDALC

EXTVAR::
RL04170::CALL	QEXEC
	LD	A,1
RL04171::LD	(DATAWM),A
EXTVLP::
RL04172::CALL	GETSCN
	JR	NZ,EXTVRT
RL04173::CALL	XCREAT
RL04174::CALL	GETWRD
RL04175::CALL	QNUMCN
RL4060::LD	DE,(LATEST)
	INC	DE		; SKIP LINK
	INC	DE
	INC	DE		; SKIP OPTFLAG
	LD	A,(DE)
	OR	080H		; SET VAR BIT
	LD	C,A
RL04177::LD	A,(DATAWM)	; WORD MODE?
	AND	A
	JR	NZ,$+4
	SET	6,C		; SET BYTE BIT
	LD	A,C
	LD	(DE),A
RL4061::LD	BC,(HDP)
	DEC	BC
	DEC	BC
	CALL	STORE+4		; STORE ADDR OF EXTVAR
	JR	EXTVLP
EXTVRT::
RL04178::CALL	SETBW
	AND	A
	JR	NZ,EXTVLP
	PUSH	HL
RL04179::LD	HL,A_RPA
	AND	A
	SBC	HL,BC
	POP	HL
	RET	Z
	JR	J_UNEX

SETBW::	PUSH	HL		; SET BYTE/INT MODE,BC=WORD HEAD ADDR
RL04181::LD	HL,BMODE
	XOR	A
	SBC	HL,BC
	JR	Z,SETBWX
RL04182::LD	HL,WMODE
	XOR	A
	SBC	HL,BC
	JR	NZ,SETBWE	; A=0
	INC	A
SETBWX::
RL04183::LD	(DATAWM),A
	LD	A,1
SETBWE::POP	HL		; RETURN A=1(BYTE/WORD) OR A=0(OTHER)
	RET

CHKVAR::
RL0420::CALL	HEAD
	INC	DE		; SKIP OPTFLAG
	LD	A,(DE)
	AND	A
RL0421::JP	M,CHVAR1	; CHECK VAR BIT
	BIT	5,A		; CHECK ARRAY BIT
	JR	Z,NOTVAR
CHVAR1::PUSH	HL
	EX	DE,HL
	INC	HL
	LD	E,(HL)		; LENGTH OF NAME
	INC	HL
	LD	D,0
	ADD	HL,DE		; BODY ADDRESS
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	POP	HL
	RET
	
RL0422::
NOTVAR::LD	DE,M_NOTV
RL0423::
J_ERR2::JP	ERROR

CONST::
RL0424::CALL	CREATE
	CALL	PULDE
RL4051::LD	BC,(LATEST)
	INC	BC		; SKIP LINK
	INC	BC
	INC	BC		; SKIP OPTFLAG
	LD	A,(BC)
	OR	2		; SET CONST BIT
	LD	(BC),A
	INC	BC
	LD	A,(BC)		; LEN OF NAME
	INC	BC
	ADD	A,C		; SKIP NAME
	LD	C,A
	JR	NC,$+3
	INC	B
	LD	A,E
	LD	(BC),A
	INC	BC
	LD	A,D
	LD	(BC),A
	RET
J_UNEX::
RL04247::JP	UNEXP

STOARY::PUSH	BC		; C=WFLAG
	PUSH	DE		; DE=ARRAY HANDLE
RL0425::CALL	GETSCN
	JR	Z,J_UNEX
	PUSH	HL
RL04252::LD	HL,LBOXP
	AND	A
	SBC	HL,BC
	POP	HL
	JR	NZ,J_UNEX

RL04253::CALL	PRM0
	POP	DE
	POP	BC
	PUSH	DE
	BIT	6,C		; BYTE ?
	JR	NZ,STARY1
	LD	DE,IASTO
	JR	STARY2
STARY1::LD	DE,BASTO
STARY2::
	CALL	PSHDE
	POP	DE
	CALL	PSHDE
	LD	DE,K_ARYS
	JP	PSHDE

PUTV1::	CALL	PSHDE
	BIT	6,C
	JR	NZ,PUTV2
	JP	STORE
PUTV2::	JP	CSTORE

TOVAR2::			; TOVAR FOR SUS2
RL04368::LD	A,(SUS1)
	CP	2
	JR	NZ,TOVAR21
RL04369::CALL	FIXDE2
RL0436A::CALL	REALBC
	JR	TOVAR22
TOVAR21::PUSH	AF
RL0437::CALL	REALBC
	POP	AF
RL04371::LD	(SUS1),A
TOVAR22::POP	BC
	BIT	6,C		; BYTE?
	JR	NZ,PUTV201
	LD	DE,043EDH	; LD (),BC
TOVAR23::
RL0438::CALL	DECOM
TOVAR24::POP	DE
	XOR	A
RL04381::LD	(LATVST+1),A
RL04382::LD	(SUS2),A
RL0439::JP	DECOM
PUTV201::
RL04383::LD	A,(NUMFLG)
	AND	A
	JR	Z,PUTV203
RL04384::CALL	PBVLIT
	JR	TOVAR24
PUTV203::LD	DE,03279H	; LD A,C ;LD (),A
	JR	TOVAR23

TOVAR::
RL0430::CALL	FLSJSR
RL0431::CALL	GETFND
RL0432::CALL	CHKVAR
	LD	C,A		; WFLAG
	BIT	5,A		; ARRAY BIT
RL04321::JP	NZ,STOARY
RL0433::LD	A,(INCOMP)
	AND	A
	JR	Z,PUTV1
	PUSH	DE		; DE=ADDR.OF VAR
	PUSH	BC
RL0434::LD	A,(SUS2)
	AND	A
	JR	NZ,TOVAR2
RL0435::LD	A,(SUS1)
	CP	2
	JR	Z,TOVARB
	AND	A
RL04351::CALL	Z,PULDEC
	POP	BC
	BIT	6,C		; BYTE?
	JR	NZ,PUTV01
	LD	DE,053EDH	; LD (),DE
PUTV00::
RL0436::CALL	DECOM
	POP	DE
RL4300::LD	(LATVST),DE
	XOR	A
RL04360::LD	(SUS1),A
RL04361::JP	DECOM

TOVARB::
	POP	BC
	BIT	6,C
	JR	NZ,TOVB02
	LD	DE,043EDH	; LD (),BC
	JR	PUTV00
TOVB02::LD	DE,03279H	; LD A,C ; LD (),A
	JR	PUTV02

PUTV01::
RL04362::LD	A,(NUMFLG)
	AND	A		; 1:LITERAL 2:BYTE VAR
	JR	Z,PUTV019
RL04363::CALL	PBVLIT
	JR	PUTV021
PUTV019::
	LD	DE,0327BH	; LD A,E ; LD (),A
PUTV02::
RL04364::CALL	DECOM
PUTV021::POP	DE
RL04365::CALL	DECOM
	XOR	A
RL04366::LD	(LATVST+1),A
RL04367::LD	(SUS1),A
	RET

PBVLIT::PUSH	HL
	LD	HL,(DP)
	DEC	HL
	DEC	HL
	DEC	A
	JR	Z,PUTVBL
	DEC	HL		; ADDR HI
	LD	B,(HL)
	DEC	HL
	LD	C,(HL)		; ADDR LO
	LD	(HL),B
	DEC	HL		; 05BH
	LD	(HL),C
	DEC	HL		; 0EDH
	LD	(HL),03AH	; LD A,()
	INC	HL
	INC	HL
	JR	PUTV016
PUTVBL::
	LD	A,(HL)
	DEC	HL
	AND	A
	JR	NZ,PUTVBL1
	LD	(HL),0AFH	; XOR A
PUTV016::INC	HL
	INC	HL
	LD	(DP),HL
	DEC	HL
	JR	PUTV017
PUTVBL1::LD	(HL),03EH	; LD A,XX
	INC	HL
	INC	HL
PUTV017::LD	(HL),032H	; LD (),A
	POP	HL
	RET

PALLOC::LD	A,E
	OR	D
	RET	Z
	PUSH	HL
	LD	HL,(DP)
RL04391::LD	A,(DPLIM+1)
	LD	C,A
ALCLP::	LD	A,H
	CP	C
RL04392::JP	NC,OUTM2
	LD	(HL),0
	INC	HL
	DEC	DE
	LD	A,E
	OR	D
	JR	NZ,ALCLP
	LD	(DP),HL
	POP	HL
	RET

ARRAY::
RL0440::CALL	BEGALC
	XOR	A
RL04400::LD	(DATAWM),A
ARYLP::
RL04401::CALL	GETSCN
	JR	NZ,ARY9
RL04402::CALL	XCREAT		; ARRAY NAME
RL04403::CALL	OGETWRD		; SIZE
RL04404::CALL	QNUMCN
	LD	DE,(DP)
	INC	DE
	INC	DE
	INC	DE
	INC	DE
RL04414::CALL	DECOM		; TOP OF ARRAY
	CALL	PULDE		; SIZE OF ARRAY
	BIT	7,D
	JR	NZ,LGARRY
RL04415::LD	A,(DATAWM)
	AND	A
	JR	Z,$+6		; IF INT
	SLA	E
	RL	D
	PUSH	DE		; PUSH SIZE
RL04416::CALL	DECOM		; WRITE SIZE TO DP
RL04417::CALL	PALLOC		; ALLOC & FILL 0
RL4052::LD	DE,(LATEST)
	INC	DE		; SKIP LINK
	INC	DE
	INC	DE		; SKIP OPTFLAG
	POP	BC		; POP SIZE
	LD	A,(DE)		; FLAG
	PUSH	DE
	OR	020H		; SET ARRAY BIT
	LD	E,A
RL04418::LD	A,(DATAWM)
	AND	A
	JR	NZ,ARY2
	SET	6,E		; SET BYTE MODE
ARY2::	LD	A,C		; BC=SIZE OF ARRAY
	OR	B
	JR	NZ,ARY3
	SET	4,E		; LATE BIND BIT
	PUSH	HL
	LD	HL,(DP)
	DEC	HL
	DEC	HL
	DEC	HL
	LD	(HL),0		; IF LATE BIND,ADDR=0
	DEC	HL
	LD	(HL),0
	POP	HL
ARY3::	LD	A,E
	POP	DE
	LD	(DE),A		; SET FLAG
RL04420::JP	ARYLP

ARY9::
RL04421::CALL	SETBW
	AND	A
	JR	NZ,ARYLP
	PUSH	HL
RL04425::LD	HL,A_RPA
	AND	A
	SBC	HL,BC
	POP	HL
RL04427::JP	NZ,UNEXP
RL04426::JP	ENDALC

LGARRY::
RL04460::LD	DE,M_LGAR
RL04461::JP	ERROR
NTVARY::
RL04462::LD	DE,M_NTVA
RL04463::JP	ERROR

SETARY::
RL0447::CALL	QCOMP
RL04471::CALL	GETFND
RL04473::CALL	HEADLP
	INC	DE		; SKIP OPT
	LD	A,(DE)
	OR	0CFH		; BIT 4,5=1?
	INC	A
	JR	NZ,NTVARY
	LD	DE,021DDH	; LD IX,XXXX
RL04474::CALL	DECOM
	CALL	FETCH
RL04475::CALL	DECOM		; ARRAY HANDLE
	LD	DE,XSTARY
RL04476::LD	A,(SUS2)
	AND	A
	JR	Z,SETAR1
	INC	DE
	INC	DE
	INC	DE
	INC	DE
SETAR1::
RL04477::LD	A,(SUS1)
	AND	A
	JR	Z,SETAR2
	INC	DE
	INC	DE
	INC	DE
	INC	DE

SETAR2::XOR	A
RL04478::LD	(SUS2),A
RL04479::JP	DEJSRC

RL0490::
PBYTES::CALL	OGETWRD
RL0491::CALL	QNUM
	JR	Z,BYTSRT
PBYTE1::
RL04911::LD	A,(DATAWM)
	AND	A
	JR	NZ,PWORDS
RL0492::CALL	CCOM
	JR	PBYTES
PWORDS::
RL04921::CALL	COMM
	JR	PBYTES
RL0493::
BYTSRT::CALL	SCNWRD
	JR	Z,UNEXP
	PUSH	BC
RL04930::CALL	HEADLP
	INC	DE		; OPT
	LD	A,(DE)		; WFLAG
	POP	BC
	BIT	1,A		; CONST BIT
	JR	Z,BYTSR1
	PSHB
	JR	PBYTE1
BYTSR1::
RL0494::CALL	SETBW
	AND	A
	JR	NZ,PBYTES
	PUSH	HL
RL0495::LD	HL,A_RPA
	AND	A
	SBC	HL,BC
	POP	HL
	RET	Z
	PUSH	HL
RL04961::LD	HL,TICK
	AND	A
	SBC	HL,BC
	JR	Z,DTICK
RL04962::LD	HL,QUOTE
	AND	A
	SBC	HL,BC
	JR	Z,DQUOTE
	JR	UNEXP

DTICK::	POP	HL
RL04971::LD	A,(INCOMP)
	PUSH	AF
	XOR	A
RL04972::LD	(INCOMP),A
RL04973::CALL	TICK
	POP	AF
RL04974::LD	(INCOMP),A
	JR	PBYTE1

DQUOTE::POP	HL
RL0502::CALL	XQUOTE
	JR	PBYTES

BMODE::	NOP
WMODE::
RL0500::
UNEXP::LD	DE,M_UNEX
RL0501::JP	ERROR

BDATA::	XOR	A
RL0509::LD	(DATAWM),A
	LD	DE,(DP)
	CALL	PSHDE		; #1
	CALL	PSHDE		; FOR ENDSTR
RL0511::CALL	PBYTES
RL0512::CALL	ENDSTR		; ENDSTR RETURN BC=BYTES
	PUSH	BC		; BYTES #2
RL0513::CALL	PUTNUM		; PUT TOP OF DATA #1
RL0514::CALL	SUSSTR
	POP	DE		; BYTES #2
	CALL	PSHDE
	JR	JPUTN1		; PUT SIZE OF DATA

QUOTE::	LD	DE,(DP)
	CALL	PSHDE		; TOP OF STRING
	CALL	PSHDE		; FOR ENDSTR
RL0542::CALL	XQUOTE
	XOR	A
RL05421::CALL	ACOM
RL0543::CALL	ENDSTR
JPUTN1::
RL05431::LD	A,(INCOMP)
	AND	A
RL0544::JP	NZ,PUTNUMC
	JP	PULDE		; FOR EXELP SUSDE

XQUOTE::
RL0545::LD	A,(EOFFLG)
	AND	A
RL05451::JP	NZ,ABNTER
RL05452::CALL	GETCHR
	CP	022H
	JR	Z,QURT1
	CP	020H
	JR	C,XQUOTE
	CP	05CH		; '\'
	JR	NZ,QUO3
RL05453::CALL	GETCHR
	CP	'n'
	JR	NZ,QUO20
	LD	A,0DH
RL05454::CALL	ACOM
	LD	A,0AH
	JR	QUO3
QUO20::	CP	'0'
	JR	NZ,QUO21
	XOR	A
	JR	QUO3
QUO21::	CP	't'
	JR	NZ,QUO22
	LD	A,09H
	JR	QUO3
QUO22::	CP	05CH
	JR	Z,QUO3
	CP	024H		; '$'
	JR	NZ,QUO3
RL05455::CALL	GETCHR
RL05456::CALL	QHEXCH
	JR	NC,QUO3
	LD	C,A
RL05457::CALL	GETCHR
RL0546::CALL	QHEXCH
	JR	C,QUO23
	PUSH	AF
	LD	A,C
RL0547::CALL	ACOM
	POP	AF
	JR	QUO3
QUO23::	LD	B,A
	LD	A,C
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,B
QUO3::
RL0548::CALL	ACOM
	JR	XQUOTE
RL0549::
QURT1::	CALL	GETCHR
	CP	02DH
	RET	NZ
RL0550::
QURTL1::LD	A,(EOFFLG)
	AND	A
RL0551::JP	NZ,ABNTER
RL0552::CALL	GETCHR
	CP	021H
	JR	C,QURTL1
	CP	022H
	JR	Z,XQUOTE
RL0553::LD	DE,M_BRST
RL0554::JP	ERROR

CPFCBN::
RL0600::LD	A,(INCOMP)
	AND	A
	JR	Z,FCBNAM
RL0601::CALL	BEGALC
	PUSH	HL
	LD	DE,(DP)
	LD	HL,4
	ADD	HL,DE
RL0602::LD	(FCBNAD),HL
	LD	HL,000EH		; 2 PARAM
RL0603::LD	(FCBNFL),HL
RL0604::LD	HL,XRFCBN
	LD	BC,EFCBN-XRFCBN
	LDIR
	LD	DE,(DP)
	LD	HL,FCBNRL-XRFCBN
	ADD	HL,DE
	LD	(DP),HL
	POP	HL
	CALL	RELOC+4			; DE = XRL TOP
RL0605::CALL	ENDALC
RL4600::LD	DE,(FCBNAD)
RL0606::JP	DEJSRC

XRFCBN::DB	'XR'
	DW	FCBNRL-XRFCBN

; CONVERT TO FCB FILENAME

FCBNAM::PULB
	PULD
	PUSH	DE		; SRC ADDR FOR CALC LENGTH
	PUSH	DE
	POP	IX		; IX=SRC
	LD	E,C		; DE=DST
	LD	D,B
	PUSH	DE
	LD	A,020H		; SPACE
	LD	B,12
FCBN0L::LD	(DE),A
	INC	DE
	DJNZ	FCBN0L
	POP	DE
	LD	A,(IX+1)
	CP	03AH		; ? DRIVE NAME
	JR	NZ,FCBNDR
	LD	A,(IX+0)
	SUB	040H		; ? DRIVE NAME ( @,A..H )
	JR	C,FNFAL
	CP	029H
	JR	NC,FNFAL
	CP	9
	JR	C,FCBN00
	SUB	20H
	JR	C,FNFAL
FCBN00::INC	IX
	INC	IX
	JR	FCBN1
FCBNDR::XOR	A
FCBN1::	LD	(DE),A		; SET DRIVE NAME
	INC	DE
	LD	B,8
FCBN1L::LD	A,(IX+0)
FRL000::CALL	QFNCHR
	JR	NC,FCBN2
FCBN11::LD	(DE),A
	INC	DE
	INC	IX
	DJNZ	FCBN1L
	LD	A,(IX+0)
	JR	FCBN3
FCBN2::	CP	03FH		; ?
	JR	Z,FCBN11
	CP	02AH		; *
	JR	NZ,FCBN22
	LD	A,03FH
FCBN2L::LD	(DE),A
	INC	DE
	DJNZ	FCBN2L
	INC	IX
	LD	A,(IX+0)
FCBN22::LD	C,A
	LD	A,B
	CP	8
	JR	Z,FNFAL
	ADD	A,E		; DE=DE+A
	LD	E,A
	LD	A,0
	ADC	A,D
	LD	D,A
	LD	A,C
FCBN3::	CP	02EH		; .
	JR	NZ,FNEND
	INC	IX
	LD	B,3
FCBN3L::LD	A,(IX+0)
FRL001::CALL	QFNCHR
	JR	NC,FCBN4
FCBN31::LD	(DE),A
	INC	DE
	INC	IX
	DJNZ	FCBN3L
	JR	FNEND
FCBN4::	CP	03FH		; ?
	JR	Z,FCBN31
	CP	02AH		; *
	JR	NZ,FNEND
	LD	A,03FH
FCBN4L::LD	(DE),A
	INC	DE
	DJNZ	FCBN4L
	INC	IX
FNEND::	PUSH	IX
	POP	DE
	EX	(SP),HL		; HL=SRC ADDR
	EX	DE,HL
	AND	A
	SBC	HL,DE		; HL=LENGTH
	EX	DE,HL		; DE=LENGTH
	POP	HL		; HL=PS
	RET			; DE=RETURN VALUE
FNFAL::	POP	DE		; DISPOSE SRC ADDR
	JP	FALSE

QFNCHR::CP	021H
	JR	C,NFNCHR
	CP	022H		; "		NG
	JR	Z,NFNCHR
	CP	02AH		; !#$%&'()	OK
	JR	C,FNCHR
	CP	02DH		; -		OK
	JR	Z,FNCHR
	CP	030H		; *+,./		NG
	JR	C,NFNCHR
	CP	03AH		; 0..9		OK
	JR	C,FNCHR
	CP	040H		; :;<=>?	NG
	JR	C,NFNCHR
	CP	05BH		; @ A..Z	OK
	JR	C,FNCHR
	CP	05EH		; [\]		NG
	JR	C,NFNCHR
	CP	061H		; ^_`		OK
	JR	C,FNCHR
	CP	07BH		; a..z		OK
	JR	C,TOLOW
	CP	07CH		; |		NG
	JR	Z,NFNCHR
	CP	07FH		; DEL		NG
	JR	Z,NFNCHR
	CP	0FEH
	JR	C,FNCHR
	JR	NFNCHR
TOLOW::	SUB	020H
FNCHR::	SCF
	RET
NFNCHR::AND	A
	RET

FCBNRL::DW	XRFCBN,FRL000+1,FRL001+1,0
EFCBN::

M_ABNT::DB	'ABNORMAL TERMINATED ',0
M_WHAT::DB	'UNDEFINED WORD ',0
M_LNGC::DB	'TOO LONG CHARACTER ',0
M_LINO::DB	0DH,0AH,'LINE ',0
M_ERRW::DB	' IN ',0
M_OUTM::DB	'TPA LESS THAN $C000 ',0
M_OUTM2::DB	'TOO LARGE OBJECT ',0
M_OUTM3::DB	'OUT OF WORK SPACE ',0
M_NOARG::DB	'NO COMMAND LINE PARAMETER ',0
M_FNOTF::DB	'FILE NOT FOUND ',0
M_SAVER::DB	'CAN',027H,'T SAVE COM-FILE',0
M_CNES::DB	'DEFINITION NESTED ',0
M_SEME::DB	'";" WITHOUT ":" ',0
M_MDER::DB	'CONT/DEF MODE ERROR ',0
M_COME::DB	'CAN',027H,'T CLOSE DEFINITION ',0
M_DBL::	DB	'ALREADY DEFINED ',0
M_IMPA::DB	'NOT ADDRESSED OBJECT ',0
M_NALC2::DB	'V-ARRAY INVALID ',0
M_STRE::DB	'STRUCTURE NEST ERROR ',0
M_NOTV::DB	'VARIABLE EXPECTED ',0
M_UNEX::DB	'UNEXPECTED WORD ',0
M_BRST::DB	'BROKEN STRING ',0
M_LGAR::DB	'TOO LARGE ARRAY ',0
M_NTVA::DB	'V-ARRAY EXPECTED ',0

LFAM6::	DW	0
	DB	0,1,8,'STKCHKON'
RL9000::DW	LCHKON

LFAM6C::DW	LFAM6
	DB	0,1,9,'STKCHKOFF'
RL9001::DW	LCHKOF

LFAM5::	DW	LFAM6C
	DB	0,1,7,'BREAKON'
RL9002::DW	BRKON

LFAM4::	DW	LFAM5
	DB	0,1,8,'BREAKOFF'
RL9003::DW	BRKOFF

LFA4::	DW	LFAM4
	DB	0,0,5,'PULDE'
	DW	PULDE

LFA5::	DW	LFA4
	DB	0,0,5,'PSHDE'
	DW	PSHDE

LFA7::	DW	LFA5
	DB	0,2,4,'TRUE'
	DW	1

LFA8::	DW	LFA7
	DB	0,2,5,'FALSE'
	DW	0

LFA10::	DW	LFA8
	DB	2,0,5,'ERROR'
	DW	XERROR

LFA12::	DW	LFA10
	DB	0,0,4,'EXIT'
	DW	EXIT

LFA12B::DW	LFA12
	DB	0,1,3,'END'
RL9011::DW	MKCOM

LFA16::	DW	LFA12B
	DB	0,1,1,','
RL9012::DW	XCOMM

LFA17::	DW	LFA16
	DB	0,1,2,'C,'
RL9013::DW	XCCOM

LFA18B::DW	LFA17
	DB	2,0,3,'JSR'	;SKIP PULDE
	DW	JSR

LFA21::	DW	LFA18B
	DB	0AH,0,3,'DUP'	; SKIP PULDE,SUSPEND PSHDE
	DW	DUP

LFA23::	DW	LFA21
	DB	0,0,4,'OVER'
	DW	OVER
	
LFA24::	DW	LFA23
	DB	0,0,4,'SWAP'
	DW	SWAP

LFA24B::DW	LFA24
	DB	7,1,4,'DROP'	; NON-AUTO SUS1
RL9030::DW	DROP

LFA25::	DW	LFA24B
	DB	6,0,1,'!'
	DW	STORE
	
LFA26::	DW	LFA25
	DB	0AH,0,1,'@'
	DW	FETCH

LFA27::	DW	LFA26
	DB	6,0,2,'C!'
	DW	CSTORE

LFA28::	DW	LFA27
	DB	0AH,0,2,'C@'
	DW	CFETCH

LFA28B::DW	LFA28
	DB	6,0,2,'P!'
	DW	PSTORE

LFA28C::DW	LFA28B
	DB	0AH,0,2,'P@'
	DW	PFETCH

LFA29::	DW	LFA28C
	DB	2,0,2,'>R'
	DW	PTOR

LFA30::	DW	LFA29
	DB	8,0,2,'R>'
	DW	RTOP

LFA31::	DW	LFA30
	DB	2,0,2,'_.'
	DW	U_DOT

LFA31B::DW	LFA31
	DB	2,0,1,'.'
	DW	DOT

LFA32::	DW	LFA31B
	DB	2,0,2,'H.'
	DW	HEXDOT

LFA33::	DW	LFA32
	DB	0,0,4,'CRLF'
	DW	CRLF

LFA34::	DW	LFA33
	DB	0,0,5,'SPACE'
	DW	SPACE

LFA35::	DW	LFA34
	DB	2,0,3,'HB.'
	DW	HEBOUT

LFA37::	DW	LFA35
	DB	0,1,1,':'
RL9031::DW	COLON

LFA38::	DW	LFA37
	DB	012H,1,1,';'	; DON'T FLSJSR
RL9032::DW	SEMI

LFA381::DW	LFA38
	DB	0,1,6,'PARAM('
RL90321::DW	PARAM

LFA39::	DW	LFA381
	DB	0,1,2,'[['
RL9033::DW	TOEXEC

LFA40::	DW	LFA39
	DB	0,1,2,']]'
RL9034::DW	TOCOMP

LFA43::	DW	LFA40
	DB	0AH,1,1,'&'
RL9035::DW	TICK

LFA52::	DW	LFA43
	DB	2,1,3,'IF{'
RL9036::DW	IF

LFA54::	DW	LFA52
	DB	0,1,2,'}{'
RL9037::DW	ELSE

LFA55::	DW	LFA54
	DB	0,1,1,'{'
RL9038::DW	BEGIN

LFA56::	DW	LFA55
	DB	2,1,6,'}WHILE'
RL9039::DW	DOWHIL

LFA57::	DW	LFA56
	DB	0,1,6,'WHILE('
RL9040::DW	WHILE

LFA58::	DW	LFA57
	DB	2,1,2,'){'
RL9041::DW	DO

LFA59::	DW	LFA58
	DB	010H,1,1,'}'		; DON'T FLSJSR
RL9042::DW	CLSSTR

LFA60::	DW	LFA59
	DB	0,1,8,'CONTINUE'
RL9043::DW	CONT

LFA61::	DW	LFA60
	DB	0,1,5,'BREAK'
RL9044::DW	BREAK

LFA62::	DW	LFA61
	DB	0,1,2,'}|'
RL9045::DW	ELSEIF

LFA70::	DW	LFA62
	DB	6,0,4,'DUMP'
	DW	DMPLIN

LFA71::	DW	LFA70
	DB	0,080H,5,'_FREE'
	DW	DP

LFA73::	DW	LFA71
	DB	0,080H,8,'_ENDFREE'
	DW	ENDFRE

LFA74::	DW	LFA73
	DB	8,0,5,'GETPS'
	DW	APSFET

LFA90::	DW	LFA74
	DB	0,0C0H,2,'_F'
	DW	REGF

LFA91::	DW	LFA90
	DB	0,0C0H,2,'_A'
	DW	REGA

LFA92::	DW	LFA91
	DB	0,0C0H,2,'_C'
	DW	REGC

LFA93::	DW	LFA92
	DB	0,0C0H,2,'_B'
	DW	REGB

LFA94::	DW	LFA93
	DB	0,0C0H,2,'_E'
	DW	REGE

LFA95::	DW	LFA94
	DB	0,0C0H,2,'_D'
	DW	REGD

LFA96::	DW	LFA95
	DB	0,0C0H,2,'_L'
	DW	REGL

LFA97::	DW	LFA96
	DB	0,0C0H,2,'_H'
	DW	REGH

LFA98::	DW	LFA97
	DB	0,080H,3,'_IX'
	DW	REGX

LFA99::	DW	LFA98
	DB	0,080H,3,'_IY'
	DW	REGY

LFA99B::DW	LFA99
	DB	0,080H,3,'_BC'
	DW	REGC

LFA99C::DW	LFA99B
	DB	0,080H,3,'_DE'
	DW	REGE

LFA99D::DW	LFA99C
	DB	0,080H,3,'_HL'
	DW	REGL

LFA99E::DW	LFA99D
	DB	0,080H,3,'_SX'
	DW	SX

LFA99F::DW	LFA99E
	DB	0,080H,3,'_SY'
	DW	SY

LFA99G::DW	LFA99F
	DB	0,080H,3,'_DX'
	DW	DX

LFA99H::DW	LFA99G
	DB	0,080H,3,'_DY'
	DW	DY

LFA99I::DW	LFA99H
	DB	0,080H,3,'_NX'
	DW	NX

LFA99J::DW	LFA99I
	DB	0,080H,3,'_NY'
	DW	NY

LFA99K::DW	LFA99J
	DB	0,0C0H,4,'_COL'
	DW	COL

LFA99L::DW	LFA99K
	DB	0,0C0H,4,'_ARG'
	DW	ARG

LFA99M::DW	LFA99L
	DB	0,0C0H,4,'_LOG'
	DW	CMD

LFA100::DW	LFA99M
	DB	0,0C0H,4,'_RPG'
	DW	RDPAG

LFA101::DW	LFA100
	DB	0,0C0H,4,'_WPG'
	DW	WRPAG

LFA102::DW	LFA101
	DB	0,0C0H,4,'_DPG'
	DW	DSPAG

LFA102B::DW	LFA102
	DB	0,080H,7,'_XCHGET'
	DW	ECHGET

LFA102C::DW	LFA102B
	DB	0,080H,7,'_XCHPUT'
	DW	ECHPUT

LFA200::DW	LFA102C
	DB	0EH,0,1,'+'	; SKIP PULDE,PULBC,SUSPEND PSHDE
	DW	PLUS

LFA201::DW	LFA200
	DB	0EH,0,1,'-'
	DW	MINUS

LFA202::DW	LFA201
	DB	0EH,0,1,'*'
	DW	MULT

LFA203::DW	LFA202
	DB	0AH,0,2,'_/'
	DW	DIV

LFA203B::DW	LFA203
	DB	0EH,0,1,'/'
	DW	IDIV

LFA204::DW	LFA203B
	DB	0EH,0,3,'AND'
	DW	XAND

LFA205::DW	LFA204
	DB	0EH,0,2,'OR'
	DW	XOR

LFA206::DW	LFA205
	DB	0EH,0,3,'XOR'
	DW	XXOR

LFA207::DW	LFA206
	DB	0AH,0,3,'CPL'
	DW	XCPL

LFA208::DW	LFA207
	DB	0AH,0,3,'NEG'
	DW	NEGATE

LFA209::DW	LFA208
	DB	0AH,0,3,'ABS'
	DW	ABS

LFA209B::DW	LFA209
	DB	0AH,0,3,'CBW'
	DW	CBW

LFA210::DW	LFA209B
	DB	0EH,0,1,'='
	DW	EQUAL

LFA211::DW	LFA210
	DB	0EH,0,2,'_>'
	DW	U_GT

LFA212::DW	LFA211
	DB	0EH,0,3,'_>='
	DW	U_GEQ

LFA213::DW	LFA212
	DB	0EH,0,2,'_<'
	DW	U_LT

LFA214::DW	LFA213
	DB	0EH,0,3,'_<='
	DW	U_LSEQ

LFA215::DW	LFA214
	DB	0AH,1,2,'0='
RL9099::DW	CMPZEQ

LFA216::DW	LFA215
	DB	0EH,0,2,'<>'
	DW	NEQ

LFA217::DW	LFA216
	DB	0EH,0,1,'>'
	DW	GT

LFA218::DW	LFA217
	DB	0EH,0,2,'>='
	DW	GE

LFA219::DW	LFA218
	DB	0EH,0,1,'<'
	DW	LT

LFA219B::DW	LFA219
	DB	0EH,0,2,'<='
	DW	LE

LFA219C::DW	LFA219B
	DB	0AH,0,2,'?-'
	DW	QMINUS

LFA220::DW	LFA219C
	DB	2,0,4,'CALL'
	DW	XCALL

LFA221::DW	LFA220
	DB	2,0,4,'BIOS'
	DW	XBIOS

LFA230::DW	LFA221
	DB	2,0,5,'CHPUT'
	DW	XCHPUT

LFA231::DW	LFA230
	DB	8,0,5,'CHGET'
	DW	XCHGET

LFA232::DW	LFA231
	DB	7,1,1,'('	; NON-AUTO SUS1
RL9100::DW	A_LPA

LFA232B::DW	LFA232
	DB	7,1,1,')'	; NON-AUTO SUS1
RL9101::DW	A_RPA

LFA232C::DW	LFA232B
	DB	0,1,1,'['
RL91011::DW	LBOXP

LFA232D::DW	LFA232C
	DB	2,1,1,']'
RL91012::DW	RBOXP

LFA232E::DW	LFA232D
	DB	0,1,4,'INT:'
RL91013::DW	WMODE

LFA232F::DW	LFA232E
	DB	0,1,5,'BYTE:'
RL91014::DW	BMODE

LFA232G::DW	LFA232F
	DB	0,1,4,'VAR('
RL9102::DW	VAR

LFA233::DW	LFA232G
	DB	0,1,7,'EXTVAR('
RL9102B::DW	EXTVAR

LFA234::DW	LFA233
	DB	7,1,2,'>>'	; SKIP PULDE,PULBC NON AUTO
RL9103::DW	TOVAR

LFA235::DW	LFA234
	DB	0,1,7,'CONST>>'
RL9104::DW	CONST

LFA236::DW	LFA235
	DB	0,1,6,'ARRAY('
RL9108::DW	ARRAY

LFA237::DW	LFA236
	DB	6,1,7,'ARRAY>>'
RL91081::DW	SETARY

LFA243::DW	LFA237
	DB	8,1,5,'DATA('		; PSHDE SUSPEND
RL9109::DW	BDATA

LFA245::DW	LFA243
	DB	6,0,7,'MEMMOVE'
	DW	MOVMEM

LFA246::DW	LFA245
	DB	0AH,1,1,022H		; PSHDE SUSPEND,NO DE FLUSH
RL9112::DW	QUOTE

LFA247::DW	LFA246
	DB	2,0,4,'STR.'
	DW	STRDOT

LFA248::DW	LFA247
	DB	0EH,0,5,'STREQ'
	DW	STREQ

LFA249::DW	LFA248
	DB	6,0,7,'STRMOVE'
	DW	STRMOV

LFA250::DW	LFA249
	DB	2,0,6,'STRLEN'
	DW	STRLEN

LFA251::DW	LFA250
	DB	6,0,6,'STRCAT'
	DW	STRCAT

LFA252::DW	LFA251
	DB	2,0,4,'LMMC'
	DW	XLMMC

LFA253::DW	LFA252
	DB	2,0,4,'LMCM'
	DW	XLMCM

LFA253B::DW	LFA253
	DB	2,0,5,'LMMC8'
	DW	XLMMC8

LFA253C::DW	LFA253B
	DB	2,0,5,'LMCM8'
	DW	XLMCM8

LFA254::DW	LFA253C
	DB	0,0,4,'LMMM'
	DW	XLMMM

LFA255::DW	LFA254
	DB	0,0,4,'LMMV'
	DW	XLMMV

LFA255B::DW	LFA255
	DB	2,0,4,'HMMC'
	DW	XHMMC

LFA255C::DW	LFA255B
	DB	0,0,4,'HMMM'
	DW	XHMMM

LFA255D::DW	LFA255C
	DB	0,0,4,'HMMV'
	DW	XHMMV

LFA256::DW	LFA255D
	DB	0,0,4,'LINE'
	DW	XLINE

LFA257::DW	LFA256
	DB	0,0,4,'PSET'
	DW	XPSET

LFA258::DW	LFA257
	DB	8,0,5,'POINT'
	DW	XPOINT

LFA258B::DW	LFA258
	DB	8,0,4,'SRCH'
	DW	XSRCH

LFA259::DW	LFA258B
	DB	2,0,6,'LDIRVM'
	DW	LDIRVM

LFA260::DW	LFA259
	DB	6,0,6,'LDIRMV'
	DW	LDIRMV

LFA260B::DW	LFA260
	DB	2,0,6,'FILVRM'
	DW	FILVRM

LFA260C::DW	LFA260B
	DB	0,0,6,'SETDPG'
	DW	SETDPG

LFA261::DW	LFA260C
	DB	2,0,4,'PAL!'
	DW	PALSTO

LFA262::DW	LFA261
	DB	2,0,6,'SETPAL'
	DW	SETPAL

LFA263::DW	LFA262
	DB	6,0,4,'VDP!'
	DW	VDPSTO

LFA264::DW	LFA263
	DB	0AH,0,4,'VDP@'
	DW	VDPFET

LFA265::DW	LFA264
	DB	0AH,0,5,'VDPS@'
	DW	VDPSFET

LFA265B::DW	LFA265
	DB	2,0,5,'VSYNC'
	DW	VSYNC

LFA266::DW	LFA265B
	DB	2,0,2,'V!'
	DW	VSTO

LFA267::DW	LFA266
	DB	2,0,3,'VC!'
	DW	VCSTO

LFA268::DW	LFA267
	DB	0AH,0,2,'V@'
	DW	VFET

LFA269::DW	LFA268
	DB	0AH,0,3,'VC@'
	DW	VCFET

LFA300::DW	LFA269
	DB	2,0,4,'BDOS'
	DW	XXBDOS

LFA301::DW	LFA300
FCBNFL::DB	8,1,6,'CNVFCB'
FCBNAD::DW	CPFCBN

LFA9999::DW	LFA301
	DB	2,0,8,'RELOCATE'
	DW	RELOC


RLCTBL::DW	CMPTOP
	DW	RL1001+1,RL1002+1,RL1003+1
	DW	RL1004+1,RL1005+1,RL1006+1,RL1010+1
	DW	RL1013+1,RL1014+1,RL1015+1
	DW	RL1016+1,RL1020+1,RL1021+1
	DW	RL1023+1,RL1025+1
	DW	RL1027+1,RL10271+1
	DW	RL1028+1,RL1029+1,RL1030+1,RL1031+1
	DW	RL1033+1,RL1040+1
	DW	RL1041+1
	DW	RL1050+1,RL1051+1,RL1052+1,RL1053+1
	DW	RL1060+1,RL1061+1,RL1063+1
	DW	RL1070+1,RL1071+1,RL10711+1
	DW	RL1072+1,RL5000+2,RL1074+1,RL1075+1
	DW	RL1076+1,RL1080+1,RL1081+1,RL10810+1
	DW	RL10811+1,RL1082+1
	DW	RL5001+2,RL1084+1,RL1085+1,RL1086+1
	DW	RL1087+1,RL1090+1
	DW	RL00001+1,RL00002+1
	DW	RL0001+1,RL0002+1,RL0003+1,RL4000+2
	DW	RL0004+1,RL4001+2,RL0005+1,RL0006+1
	DW	RL0007+1,RL00071+1,RL0008+1,RL0009+1
	DW	RL0010+1,RL0011+1,RL0012+1,RL0013+1
	DW	RL00131+1,RL00132+1
	DW	RL0014+1,RL0015+1,RL0016+1,RL0018+1
	DW	RL0019+1,RL0020+1,RL0021+1,RL0022+1
	DW	RL00220+1
	DW	RL0023+1,RL0024+1,RL0025+1,RL0026+1
	DW	RL0027+1,RL0028+1,RL0029+1,RL0030+1
	DW	RL0031+1,RL0032+1,RL00321+1
	DW	RL0033+1,RL0034+1,RL0035+1
	DW	RL00351+1,RL0036+1,RL0037+1,RL0038+1
	DW	RL0039+1,RL0040+1,RL0041+1,RL0042+1
	DW	RL0043+1,RL0044+1,RL0045+1,RL0046+1
	DW	RL0050+1,RL0051+1,RL0052+1,RL4010+2
	DW	RL0053+1,RL0054+1,RL00541+1
	DW	RL0055+1,RL0056+1,RL0057+1,RL0058+1
	DW	RL0059+1,RL0060+1,RL0061+1
	DW	RL0070+1
	DW	RL0072+1,RL0073+1,RL0074+1
	DW	RL0075+1

	DW	RL0080+1,RL0081+1,RL0082+1,RL0083+1
	DW	RL00831+1,RL00832+1,RL0084+1,RL0086+1
	DW	RL0087+1,RL00871+1,RL0088+1
	DW	RL0091+1,RL0092+1,RL0093+1
	DW	RL0094+1,RL0095+1,
	DW	RL00950+1,RL00951+1
	DW	RL00953+1,RL00954+1,RL00955+1,RL00956+1
	DW	RL0100+1,RL01001+1,RL01002+1
	DW	RL01003+1,RL01004+1,RL01005+1,RL01006+1
	DW	RL0103+1,RL0104+1,RL01040+1
	DW	RL01041+1,RL0105+1,RL0106+1
	DW	RL0107+1,RL0108+1,RL0109+1,RL0110+1
	DW	RL01100+1,RL01101+1,RL01102+1
	DW	RL01104+1,RL0112+1,RL01123+1
	DW	RL01124+1,RL01125+1,RL01126+1,RL01127+1
	DW	RL01128+1,RL01152+1,RL01153+1,RL01155+1
	DW	RL0116+1,RL0117+1
	DW	RL0118+1,RL0119+1,RL0120+1,RL01200+1
	DW	RL01201+1,RL01202+1,RL01203+1,RL01204+1
	DW	RL01210+1,RL01211+1
	DW	RL01212+1,RL01213+1,RL01214+1
	DW	RL0122+1,RL0123+1,RL0124+1,RL01240+1
	DW	RL01241+1,RL01242+1,RL4120+2,RL01243+1
	DW	RL01244+1,RL01245+1
	DW	RL0130+1,RL0131+1,RL0133+1
	DW	RL01340+1,RL01342+1,RL01343+1
	DW	RL01344+1,RL01345+1
	DW	RL01351+1,RL01352+1,RL01353+1,RL01354+1
	DW	RL01355+1,RL01356+1,RL01357+1,RL01358+1
	DW	RL01359+1,RL0135A+1
	DW	RL0136+1
	DW	RL01361+1,RL01362+1,RL01363+1
	DW	RL01364+1,RL01365+1,RL01366+1,RL01367+1
	DW	RL01368+1,RL01369+1,RL0136A+1
	DW	RL01370+1,RL01371+1
	DW	RL01372+1,RL01373+1,RL01374+1
	DW	RL0140+1,RL0141+1,RL0142+1,RL0143+1
	DW	RL4121+1,RL01442+1,RL4122+1

	DW	RL0150+1,RL0151+1,RL0153+1
	DW	RL0154+1,RL01550+1,RL01551+1,RL01552+1
	DW	RL01553+1,RL01554+1
	DW	RL4223+2,RL0158+1,RL0159+1
	DW	RL0161+1,RL01611+1,RL01612+1,RL0162+1
	DW	RL01621+1,RL01622+1,RL01623+1,RL01624+1
	DW	RL01625+1
	DW	RL0170+1,RL0171+1,RL0172+1,RL4011+2
	DW	RL0173+1,RL0174+1,RL0175+1

	DW	RL0176+1,RL01761+1
	DW	RL4012+2,RL4013+2,RL4014+2
	DW	RL0177+1,RL0178+1,RL01781+1
	DW	RL01784+1,RL01785+1,RL01786+1
	DW	RL01787+1,RL4130+2,RL01788+1,RL01789+1
	DW	RL0178A+1,RL0178B+1,RL0178C+1,RL0178D+1
	DW	RL0178E+1
	DW	RL4132+2,RL0179+1,RL4133+2,RL01792+1
	DW	RL01791+1
	DW	RL0180+1,RL01801+1,RL01802+1,RL01803+1
	DW	RL01804+1,RL01805+1,RL01806+1,RL01807+1
	DW	RL0181+1,RL01811+1,RL01812+1,RL01813+1
	DW	RL4134+2,RL4135+2,RL0182+1
	DW	RL01821+1,RL01823+1,RL01824+1
	DW	RL01825+1,RL01826+1,RL01827+1,RL4136+2
	DW	RL0183+1,RL01831+1,RL01970+1
	DW	RL01971+1,RL01972+1,RL01973+1
	DW	RL4020+2
	DW	RL4021+2,RL01974+1,RL01975+1
	DW	RL01976+1,RL4022+2
	DW	RL4023+2,RL4024+2,RL4025+2,RL4026+2
	DW	RL01977+1,RL01978+1,RL01979+1
	DW	RL01980+1,RL01981+1,RL01982+1,RL01983+1
	DW	RL01985+1
	DW	RL01986+1,RL01987+1,RL01988+1,RL01989+1
	DW	RL01990+1,RL4030+2,RL01999+1

	DW	RL02000+1,RL02001+1,RL0200+1
	DW	RL02011+1,RL02012+1,RL02013+1
	DW	RL02014+1,RL02015+1,RL02016+1
	DW	RL0202+1,RL0203+1,RL0204+1
	DW	RL0205+1,RL0206+1,RL02061+1
	DW	RL0207+1
	DW	RL4200+2
	DW	RL02100+1,RL02101+1,RL02102+1
	DW	RL0210+1,RL0211+1
	DW	RL02120+1,RL02121+1,RL02122+1
	DW	RL0212+1,RL0213+1,RL02130+1,RL02131+1
	DW	RL02132+1,RL02133+1,RL02134+1,RL02135+1
	DW	RL02136+1,RL0214+1,RL0215+1
	DW	RL0216+1,RL0217+1
	DW	RL02181+1,RL02182+1,RL02183+1,RL02184+1
	DW	RL02185+1,RL02186+1,RL02187+1
	DW	RL0220+1,RL02200+1,RL02203+1,RL02204+1
	DW	RL02205+1,RL0221+1,RL0222+1,RL02225+1
	DW	RL02226+1,RL02227+1,RL02228+1
	DW	RL0222F+1,RL0222G+1,RL0222H+1
	DW	RL0223+1,RL0224+1,RL0230+1
	DW	RL0231+1,RL02312+1,RL0232+1
	DW	RL0233+1,RL0240+1
	DW	RL0241+1,RL0242+1,RL0243+1,RL0250+1
	DW	RL0251+1,RL0252+1,RL0253+1
	DW	RL0255+1,RL02551+1,RL0256+1,RL0257+1
	DW	RL0270+1
	DW	RL0271+1,RL0272+1,RL0273+1,RL0280+1
	DW	RL0281+1,RL0282+1,RL0284+1,RL0290+1
	DW	RL0291+1,RL02911+1,RL02912+1,RL02913+1
	DW	RL4201+2,RL02914+1,RL02915+1,RL02916+1
	DW	RL02920+1,RL02921+1
	DW	RL0293+1,RL0294+1,RL02941+1,RL02942+1
	DW	RL0296+1,RL02961+1,RL0297+1,RL0298+1
	DW	RL0299+1,RL4039+2,RL4040+2
	DW	RL03020+1,RL03021+1,RL03023+1
	DW	RL03024+1,RL03025+1,RL03026+1,RL03027+1
	DW	RL0310+1,RL03101+1,RL0311+1
	DW	RL0312+1,RL03120+1,RL0313+1,RL03130+1
	DW	RL0320+1,RL03201+1,RL03203+1
	DW	RL0321+1,RL0322+1
	DW	RL0330+1,RL03302+1
	DW	RL03303+1,RL03304+1,RL0335+1
	DW	RL03350+1,RL03351+1,RL03352+1
	DW	RL0336+1,RL03361+1,RL03362+1,RL03363+1
	DW	RL03364+1,RL03365+1,RL03366+1,RL03367+1
	DW	RL0400+1,RL0401+1,RL0402+1,RL0403+1
	DW	RL04032+1,RL04033+1,RL04034+1
	DW	RL04035+1,RL04036+1,RL04037+1
	DW	RL04038+1,RL04039+1,RL0403A+1

	DW	RL0410+1,RL0411+1,RL0413+1
	DW	RL4050+2,RL0414+1,RL0415+1,RL0416+1
	DW	RL0417+1,RL04170+1
	DW	RL04171+1,RL04172+1,RL04173+1,RL04174+1
	DW	RL04175+1,RL04177+1,RL04178+1
	DW	RL04179+1,RL04181+1,RL04182+1
	DW	RL04183+1,RL4060+2,RL4061+2
	DW	RL0420+1,RL0421+1,RL0422+1
	DW	RL0423+1,RL0424+1,RL04247+1
	DW	RL4051+2
	DW	RL0425+1,RL04252+1,RL04253+1
	DW	RL0430+1,RL0431+1,RL0432+1,RL04321+1
	DW	RL0433+1,RL0434+1,RL0435+1,RL04351+1
	DW	RL0436+1,RL04360+1,RL04361+1,RL04362+1
	DW	RL04363+1
	DW	RL04364+1,RL04365+1,RL04366+1,RL04367+1
	DW	RL04368+1,RL04369+1,RL0436A+1
	DW	RL0437+1,RL04371+1
	DW	RL0438+1,RL04381+1,RL04382+1,RL0439+1
	DW	RL04383+1,RL04384+1,RL04391+1,RL04392+1
	DW	RL4300+2

	DW	RL0440+1,RL04400+1,RL04401+1,RL04402+1
	DW	RL04403+1,RL04404+1
	DW	RL04414+1,RL04415+1,RL4052+2
	DW	RL04416+1,RL04417+1,RL04418+1
	DW	RL04420+1,RL04421+1
	DW	RL04425+1,RL04426+1,RL04427+1
	DW	RL04460+1,RL04461+1,RL04462+1,RL04463+1

	DW	RL0447+1,RL04471+1,RL04473+1
	DW	RL04474+1,RL04475+1,RL04476+1,RL04477+1
	DW	RL04478+1,RL04479+1

	DW	RL0490+1,RL0491+1,RL04911+1,RL0492+1
	DW	RL04921+1,RL0493+1,RL04930+1
	DW	RL0494+1,RL0495+1
	DW	RL04961+1,RL04962+1
	DW	RL04971+1,RL04972+1,RL04973+1,RL04974+1
	DW	RL0500+1,RL0501+1,RL0502+1
	DW	RL0509+1,RL0511+1
	DW	RL0512+1,RL0513+1,RL0514+1
	DW	RL0542+1,RL05421+1
	DW	RL0543+1,RL05431+1,RL0544+1,RL0545+1
	DW	RL05451+1,RL05452+1,RL05453+1,RL05454+1
	DW	RL05455+1,RL05456+1,RL05457+1
	DW	RL0546+1
	DW	RL0547+1,RL0548+1,RL0549+1,RL0550+1
	DW	RL0551+1,RL0552+1,RL0553+1,RL0554+1

	DW	RL0600+1,RL0601+1,RL0602+1,RL0603+1
	DW	RL0604+1,RL0605+1,RL0606+1
	DW	RL4600+2
	DW	FRL000+1,FRL001+1

	DW	LFAM6C,LFAM5,LFAM4,LFA4
	DW	LFA5,LFA7,LFA8
	DW	LFA10,LFA12,LFA12B,LFA16
	DW	LFA17,LFA18B,LFA21,LFA23
	DW	LFA24,LFA24B,LFA25,LFA26
	DW	LFA27,LFA28,LFA28B,LFA28C
	DW	LFA29,LFA30
	DW	LFA31,LFA31B,LFA32,LFA33
	DW	LFA34,LFA35,LFA37,LFA38
	DW	LFA381
	DW	LFA39,LFA40,LFA43,LFA52
	DW	LFA54,LFA55,LFA56,LFA57
	DW	LFA58,LFA59,LFA60,LFA61
	DW	LFA62,LFA70,LFA71,LFA73
	DW	LFA74,LFA90,LFA91
	DW	LFA92,LFA93,LFA94,LFA95
	DW	LFA96,LFA97,LFA98,LFA99
	DW	LFA99B,LFA99C,LFA99D,LFA99E
	DW	LFA99F,LFA99G,LFA99H,LFA99I
	DW	LFA99J,LFA99K,LFA99L,LFA99M
	DW	LFA100,LFA101,LFA102
	DW	LFA102B,LFA102C
	DW	LFA200,LFA201,LFA202,LFA203
	DW	LFA203B,LFA204,LFA205,LFA206
	DW	LFA207,LFA208,LFA209,LFA209B
	DW	LFA210
	DW	LFA211,LFA212,LFA213,LFA214
	DW	LFA215,LFA216,LFA217,LFA218
	DW	LFA219,LFA219B,LFA219C,LFA220
	DW	LFA221,LFA230,LFA231,LFA232
	DW	LFA232B,LFA232C,LFA232D
	DW	LFA232E,LFA232F,LFA232G
	DW	LFA233,LFA234,LFA235,LFA236
	DW	LFA237
	DW	LFA243,LFA245,LFA246
	DW	LFA247,LFA248,LFA249,LFA250
	DW	LFA251
	DW	LFA252,LFA253,LFA253B,LFA253C
	DW	LFA254,LFA255,LFA255B,LFA255C
	DW	LFA255D,LFA256,LFA257,LFA258
	DW	LFA258B
	DW	LFA259,LFA260,LFA260B,LFA260C
	DW	LFA261
	DW	LFA262,LFA263,LFA264,LFA265
	DW	LFA265B
	DW	LFA266,LFA267,LFA268,LFA269
	DW	LFA300,LFA301
	DW	LFA9999
	DW	RL9000,RL9001,RL9002,RL9003
	DW	RL9011,RL9012,RL9013,RL9030
	DW	RL9031,RL9032,RL90321
	DW	RL9033,RL9034,RL9035
	DW	RL9036,RL9037,RL9038,RL9039
	DW	RL9040,RL9041,RL9042,RL9043
	DW	RL9044,RL9045
	DW	RL9099,RL9100,RL9101
	DW	RL91011,RL91012,RL91013,RL91014
	DW	RL9102,RL9102B,RL9103
	DW	RL9104,RL9108,RL91081,RL9109
	DW	RL9112
	DW	FCBNAD
	DW	EOIB,ICP,HDP,LATEST

	DW	FCBNRL,FCBNRL+2,FCBNRL+4

	DW	0

EOC::

	END
