−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
　　RGUIDE.DOC　Ｈ−ＦＯＲＴＨ Ver1.4 リファレンスガイド

　　Copyright(c) 1999 A.Hiramatsu（平松　明夫） 99/04/01
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−


　このリファレンスガイドでは、システムで定義済みのすべてのワードのリファレン
スとエラーメッセージについて述べます


●全ワードリファレンス


--- 凡例 -------------------------------------------------------------------


+	n  PARAM( i1 i2 )  i3
↑	↑	  ↑	   ↑
｜　　　｜　　　　｜	   戻り値（実行後スタックに積まれる値）
｜	｜	　パラメータ（実行前にスタックから取り出す値）
｜	ワードの種別
ワード名

ARRAY>> <w>  c  PARAM( a i )
↑	↑   ↑	       ↑
｜　　　｜   ｜	       パラメータ
｜	｜   ワードの種別
｜	オペランドとしてのワード名
ワード名

・ワードの種別

	n	被コンパイルワード
	c	コンパイラ制御ワード、ワード定義中でも定義外でも使える
	cc	コンパイラ制御ワード、ワード定義中のみ使える
	ce	コンパイラ制御ワード、ワード定義外でのみ使える
	x	実行制御ワード、ワード定義中でのみ使える
	定	システム定義済み定数
	変	システム変数

※ここでいうワード種別はワードの内部構造からくるもので、感覚的に若干そぐわな
いものあります。たとえばワード EXIT は、「ＤＯＳに戻る」という機能から考える
と「実行制御ワード」ですが、実際の内部構造は「被コンパイルワード」と同じなの
でワード EXIT には n がついています。

・パラメータ及び戻り値

	i	整数型（２バイトサイズ）の値
	c	バイト型（１バイトサイズ）の値
	b	ブール値（０なら偽、０でなければ真）
	s	文字列
	a	なんらかのアドレス

※パラメータがバイト型の場合、上位バイトは無視されます。また、戻り値がバイト
型の場合、上位バイトは０です。

・オペランドとしてのワード名

	<w>	ワード名が１つ必要
	<v> )	変数名並びが必要
	<e> )	その他。詳しくはユーザーズガイドを参照

------------------------------------------------------------- 凡例終わり ---

＜＜＜　演算系のワード　＞＞＞

+	n  PARAM( i1 i2 )  i3

	足し算を行います。i1 、i2 の和 i3 をスタックに置きます。

-	n  PARAM( i1 i2 )  i3

	引き算を行います。i1 から i2 を引いた結果 i3 をスタックに置きます。

*	n  PARAM( i1 i2 )  i3

	かけ算を行います。i1 、i2 の積 i3 をスタックに置きます。

_/	n  PARAM( i1 i2 )  i3

	符号無し数の割り算を行います。i1 、i2 を符号無し数とみなし、i1 を i2
	で割った結果 i3 をスタックに置きます。

/	n  PARAM( i1 i2 )  i3

	符号付き数の割り算を行います。i1 、i2 を符号付き数とみなし、i1 を i2
	で割った結果 i3 をスタックに置きます。

AND	n  PARAM( i1 i2 )  i3

	i1 、i2 の全ビット論理積をとり、その結果 i3 をスタックに置きます。

OR	n  PARAM( i1 i2 )  i3

	i1 、i2 の全ビット論理和をとり、その結果 i3 をスタックに置きます。

XOR	n  PARAM( i1 i2 )  i3

	i1 、i2 の全ビット排他的論理和をとり、その結果 i3 をスタックに置きま
	す。

CPL	n  PARAM( i1 )  i2

	i1 の全ビットを反転し、その結果 i2 をスタックに置きます。

NEG	n  PARAM( i1 )  i2

	符号付き数 i1 の符号を反転し、その結果 i2 をスタックに置きます。

ABS	n  PARAM( i1 )  i2

	符号付き数 i1 の絶対値 i2 をスタックに置きます。

CBW	n  PARAM( c )  i

	バイト型の数値 c の第７ビットを符号とみなし、２バイト符号付き数値 i 
	に変換してスタックに置きます。


＜＜＜　比較系のワード　＞＞＞

=	n  PARAM( i1 i2 )  b

	数値 i1 と i2 が等しければ１を、そうでなければ０をスタックに置きます。

<>	n  PARAM( i1 i2 )  b

	数値 i1 と i2 が等くなければ１を、そうでなければ０をスタックに置きま
	す。

_>	n  PARAM( i1 i2 )  b

	符号無し数値 i1 が i2 より大きければ１を、そうでなければ０をスタック
	に置きます。

_>=	n  PARAM( i1 i2 )  b

	符号無し数値 i1 と i2 が等しいか、または i1 が i2 より大きければ１を、
	そうでなければ０をスタックに置きます。

_<	n  PARAM( i1 i2 )  b

	符号無し数値 i1 が i2 より小さければ１を、そうでなければ０をスタック
	に置きます。

_<=	n  PARAM( i1 i2 )  b

　	符号無し数値 i1 と i2 が等しいか、または i1 が i2 より小さければ１を、
	そうでなければ０をスタックに置きます。

>	n  PARAM( i1 i2 )  b

	符号付き数値 i1 が i2 より大きければ１を、そうでなければ０をスタック
	に置きます。

>=	n  PARAM( i1 i2 )  b

	符号付き数値 i1 と i2 が等しいか、または i1 が i2 より大きければ１を、
	そうでなければ０をスタックに置きます。

<	n  PARAM( i1 i2 )  b

	符号付き数値 i1 が i2 より小さければ１を、そうでなければ０をスタック
	に置きます。

<=	n  PARAM( i1 i2 )  b

	符号付き数値 i1 と i2 が等しいか、または i1 が i2 より小さければ１を、
	そうでなければ０をスタックに置きます。

0=	n  PARAM( i )  b

	数値 i が０なら１を、そうでなければ０をスタックに置きます。

?-	n  PARAM( i )  b

	符号付き数値 i が負なら１を、０か正なら０をスタックに置きます。


＜＜＜　コンソール系のワード　＞＞＞

_.	n  PARAM( i )

	数値 i を符号無しとみなして１０進表示します。

.	n  PARAM( i )

	数値 i を符号付きとみなして１０進表示します。

H.	n  PARAM( i )

	数値 i を符号無しとみなして１６進４桁で表示します。

HB.	n  PARAM( c )

	バイト型の数値 c を１６進２桁で表示します。

STR.	n  PARAM( s )

	s を文字列の先頭番地とみなして文字列を画面に出力します。

CRLF	n  PARAM( )

	改行します。

SPACE	n  PARAM( )

	半角空白を１個出力します。

CHPUT	n  PARAM( c )

	文字コード c を画面に出力します。

CHGET	n  PARAM( )  c

	キーボードから１文字入力し、その文字コード c をスタックに置きます。

DUMP	n  PARAM( a i )

	a番地から i バイトダンプ表示します。デバッグに重宝します。(^^;


＜＜＜　メモリ操作系のワード　＞＞＞

!	n  PRAM( i a )

	a番地に２バイト数値 i を書き込みます。具体的には a番地に i の下位バ
	イト、a+1番地に i の上位バイトを書き込みます。

@	n  PARAM( a )  i

	a番地及び a+1番地の内容を２バイトの値とみなして読み、その値 i をスタ
	ックに置きます。

C!	n  PARAM( c a )

	a番地にバイト型の数値 c を書き込みます。

C@	n  PARAM( a )  c

	a番地を読んでその値 c をスタックに置きます。

MEMMOVE	n  PARAM( a1 i a2 )

	a1番地から i バイトを a2番地に転送します。転送元と転送先がダブってい
	ても正しく動作します。

＜＜＜　文字列操作系のワード　＞＞＞

STREQ	n  PARAM( a s )  b

	a番地以降のメモリ内容が文字列 s と等しいかどうか比較します。比較は
	s の長さぶんだけ行われます。

STRMOVE	n  PARAM( s a )

	文字列 s をメモリの a番地以降に転送します。a番地以降少なくとも s の
	長さ＋１バイトは書き換えても安全な領域（配列かユーザーフリーエリア）
	でなければなりません。

STRLEN	n  PARAM( s )  i

	文字列 s の長さ i をスタックに置きます。

STRCAT	n  PARAM( s1 s2 )

	文字列 s1 の後ろに s2 を結合します。s1 の後ろは少なくとも s2 の長さ
	＋１バイトは書き換えても安全な領域でなければなりません。


＜＜＜　Ｉ／Ｏポートアクセスワード　＞＞＞

P!	n  PARAM( c a )

	Ｉ／Ｏポート a番にバイト型の値 c を書き込みます。

P@	n  PARAM( a )  c

	Ｉ／Ｏポート a番を読み、その値 c をスタックに置きます。


＜＜＜　スタック操作系のワード　＞＞＞

DUP	n  PARAM( i )  i i

	スタックの一番上の値 i を複写してスタックに積みます。

OVER	n  PARAM( i1 i2 )  i1 i2 i1

	スタックの上から２番目の値 i1 を複写してスタックに積みます。

SWAP	n  PARAM( i1 i2 )  i2 i1

	スタックの一番上の値 i2 と２番目の値 i1 を入れ換えます。

DROP	n  PARAM( i )

	スタックの一番上の値 i を捨てます。


＜＜＜　システム定義済み定数　＞＞＞

TRUE	定  PARAM( )  b

	スタックに１（ブール値「真」）を置きます。

FALSE	定  PARAM( )  b

	スタックに０（ブール値「偽」）を置きます。


＜＜＜　システム変数　＞＞＞

_FREE	変  PARAM( )  a

	ユーザーフリーエリアの先頭番地を示します。

_ENDFREE 変  PARAM( )  a

	ユーザーフリーエリアの最終番地を示します。

_F	変  PARAM( )  c
_A	変  PARAM( )  c
_C	変  PARAM( )  c
_B	変  PARAM( )  c
_E	変  PARAM( )  c
_D	変  PARAM( )  c
_L	変  PARAM( )  c
_H	変  PARAM( )  c
_IX	変  PARAM( )  i
_IY	変  PARAM( )  i
_BC	変  PARAM( )  i
_DE	変  PARAM( )  i
_HL	変  PARAM( )  i

	以上はＣＰＵレジスタ変数です。ネイティブコードコールで使用します。

_SX	変  PARAM( )  i
_SY	変  PARAM( )  i
_DX	変  PARAM( )  i
_DY	変  PARAM( )  i
_NX	変  PARAM( )  i
_NY	変  PARAM( )  i
_COL	変  PARAM( )  c
_ARG	変  PARAM( )  c
_LOG	変  PARAM( )  c

	以上はＶＤＰコマンド変数です。これらの変数に必要な値を設定した上でＶ
	ＤＰコマンドワードを使用します。

_RPG	変  PARAM( )  i

	ＶＲＡＭの読みだし（転送元）ページを選択するページセレクタです。

_WPG	変  PARAM( )  i

	ＶＲＡＭの書き込み（転送先）ページを選択するページセレクタです。

_DPG	変  PARAM( )  i

	表示するページを選択するページセレクタです。これに値を代入した後で
	SETDPGを実行することにより表示ページが変わります。

_XCHGET	変  PARAM( )  i

	ユーザーが作成した１文字入力ルーチンのアドレスを代入します。この値が
	０だとＢＩＯＳのＣＨＧＥＴによる入力が行われます。デフォルト値は０で
	す。

_XCHPUT	変  PARAM( )  i

	ユーザーが作成した１文字出力ルーチンのアドレスを代入します。この値が
	０だとＢＩＯＳのＣＨＰＵＴによる出力が行われます。デフォルト値は０で
	す。


＜＜＜　ＶＤＰ操作系のワード　＞＞＞

VDP!	n  PARAM( c1 c2 )

	ＶＤＰレジスタ c2番に c1 を書き込みます。

VDP@	n  PARAM( c1 )  c2

	ＶＤＰレジスタ c1番に最後に書き込まれた値をＢＩＯＳのワークエリアか
	ら取り出してその値 c2 をスタックに置きます。

VDPS@	n  PARAM( c1 )  c2

	ＶＤＰのステータスレジスタ c1番を読み、その値 c2 をスタックに置きます。

VSYNC	n  PARAM( i )

	画面の垂直周期を i回待ちます。

SETDPG	n  PARAM( )

	ディスプレイページをシステム変数 _DPG が指すページに切り換えます。ス
	クリーンモードが４以下の場合は何もしません。

PAL!	n  PARAM( i c )

	パレット c番にパレット値 i を設定します。i の値は緑×２５６＋赤×１６
	＋青です。

SETPAL	n  PARAM( a )

	a番地から３２バイトをパレットレジスタに送ります。


＜＜＜　ＶＲＡＭ操作系のワード　＞＞＞

V!	n  PARAM( i a )

	ＶＲＡＭの a番地から２バイトに整数型値 i を書き込みます。a にはシス
	テム変数 _WPG が加味されます。

VC!	n  PARAM( c a )

	ＶＲＡＭの a番地にバイト型の数値 c を書き込みます。a にはシステム変数
	_WPG が加味されます。

V@	n  PARAM( a )  i

	ＶＲＡＭの a番地から２バイト読み込み、その値 i をスタックに置きます。
	a にはシステム変数 _RPG が加味されます。

VC@	n  PARAM( a )  c

	ＶＲＡＭの a番地から１バイト読み込み、その値 c をスタックに置きます。
	a にはシステム変数 _RPG が加味されます。

LDIRVM	n  PARAM( a1 i a2 )

	メモリの a1番地から i バイトをＶＲＡＭの a2番地に転送します。a2 には
	システム変数 _WPG が加味されます。

LDIRMV	n  PARAM( a1 i a2 )

	ＶＲＡＭの a1番地から i バイトをメモリの a2 番地に転送します。a1 に
	はシステム変数 _RPG が加味されます。

FILVRM	n  PARAM( c i a )

	ＶＲＡＭの a番地から i バイトを１バイト値 c で埋めます。a にはシステ
	ム変数 _WPG が加味されます。


＜＜＜　ＶＤＰコマンドワード　＞＞＞

LMMC	n  PARAM( a )

	メモリの a番地以降のデータをＶＲＡＭの矩形領域に論理転送します。スク
	リーン５、７用です。
	設定すべきシステム変数： _DX _DY _NX _NY _LOG  _WPG

LMCM	n  PARAM( a )

	ＶＲＡＭの矩形領域のデータをメモリの a番地以降に論理転送します。スク
	リーン５、７用です。
	設定すべきシステム変数： _SX _SY _NX _NY  _RPG

LMMC8	n  PARAM( a )

	メモリの a番地以降のデータをＶＲＡＭの矩形領域に論理転送します。スク
	リーン８以上用です。
	設定すべきシステム変数： _DX _DY _NX _NY _LOG  _WPG

LMCM8	n  PARAM( a )

	ＶＲＡＭの矩形領域のデータをメモリの a番地以降に論理転送します。スク
	リーン８以上用です。
	設定すべきシステム変数： _SX _SY _NX _NY  _RPG

HMMC	n  PARAM( a )

	メモリの a番地以降のデータをＶＲＡＭの矩形領域に高速転送します。
	設定すべきシステム変数： _DX _DY _NX _NY  _WPG

LMMM	n  PARAM( )

	ＶＲＡＭ上で矩形領域の論理転送を行います。
	設定すべきシステム変数： _SX _SY _DX _DY _NX _NY _LOG  _RPG _WPG

LMMV	n  PARAM( )

	ＶＲＡＭ上で矩形領域の論理塗り潰しを行います。
	設定すべきシステム変数： _DX _DY _NX _NY _COL _LOG  _WPG

HMMM	n  PARAM( )

	ＶＲＡＭ上で矩形領域の高速転送を行います。
	設定すべきシステム変数： _SX _SY _DX _DY _NX _NY  _RPG _WPG

HMMV	n  PARAM( )

	ＶＲＡＭ上で矩形領域の高速塗り潰しを行います。
	設定すべきシステム変数： _DX _DY _NX _NY _COL  _WPG

LINE	n  PARAM( )

	ＶＲＡＭ上で直線を描画します。。
	設定すべきシステム変数： _DX _DY _NX _NY _COL _LOG  _WPG

PSET	n  PARAM( )

	ＶＲＡＭ上で点を描画します。
	設定すべきシステム変数： _DX _DY _COL _LOG  _WPG

POINT	n  PARAM( )  c

	ＶＲＡＭ上の点の色を調べます。戻り値 c が結果です。
	設定すべきシステム変数： _SX _SY  _RPG

SRCH	n  PARAM( )  i

	ＶＲＡＭ上で指定色または指定色以外の色を水平サーチします。戻り値 i
	が見つかったＸ座標です。見つからなかった場合 i は -1 です。
	設定すべきシステム変数： _SX _SY _COL _ARG  _RPG


＜＜＜　ネイティブコードコール　＞＞＞

CALL	n  PARAM( a )

	現在のメモリマップ上で a番地をコールします。

BIOS	n  PARAM( a )

	ＢＩＯＳ（メインＲＯＭ）の a番地をコールします。

BDOS	n  PARAM( c )

	ＤＯＳのファンクションコール c番を実行します。

CNVFCB	n  PARAM( s a )  i

	ファイル名を表す文字列 s をＤＯＳのＦＣＢ形式に変換して a番地に転送
	します。変換に成功した文字数 i をスタックに置きます。


＜＜＜　コンパイルスイッチ　＞＞＞

STKCHKON	ce  PARAM( )

	以後、ループ中のスタックエラーを検出します。（デフォルト）

STKCHKOFF	ce  PARAM( )

	以後、ループ中のスタックエラーを検出しません。

BREAKON		ce  PARAM( )

	以後、ループ中のＣＴＲＬ−ＳＴＯＰを検出します。（デフォルト）

BREAKOFF	ce  PARAM( )

	以後、ループ中のＣＴＲＬ−ＳＴＯＰを検出しません。


＜＜＜　変数操作ワード　＞＞＞

>> <w>		c  PARAM( i )

	変数名 <w> に数値 i を代入します。

ARRAY>> <W>	c  PARAM( a i )

	可変配列 <w> の先頭番地を a、サイズを i （バイト単位）に設定します。


＜＜＜　定義系のワード　＞＞＞

: <w>		ce PARAM( )

	<w> をワード名とする新しいワードの定義を開始します。

PARAM( <v> )	cc  PARAM( )

	新しいワードのパラメータ変数を変数名並び <v> で指定します。 : <w> の
	直後にのみ有効で、単体では使えません。

;		cc  PARAM( )

	ワード定義を終了します。

VAR( <v> )	c  PARAM( )

	変数名並び <v> で指定した変数を宣言します。

CONST>> <w>	ce  PARAM( i )

	数値 i を値とする定数 <w> を定義します。

ARRAY( <e> )	c  PARAM( )

	配列変数を宣言します。<e> の書き方についてはユーザーズガイドを参照し
	てください。

EXTVAR( <e> )	ce  PARAM( )

	外部変数を宣言します。<e> の書き方についてはユーザーズガイドを参照し
	てください。

END <w>		ce  PARAM( )

	ワード <w> をメインワードとし、コンパイルを終了します。ソースプログ
	ラムの一番最後に書きます。これを書いていないとＣＯＭファイルは作成さ
	れません。


＜＜＜　実行制御ワード　＞＞＞

IF{	x  PARAM( b )

	分岐構文です。ブール値 b が０でない場合のみ、}、}{、}| までのワード
	群を実行します。

}{	x  PARAM( )

	IF{ と組み合わせて使います。条件不成立の場合実行すべきワード群の始ま
	りを指定します。詳しくはユーザーズガイドを参照してください。

}|	x  PARAM( )

	IF{ と組み合わせて使います。多方向分岐の際使用します。詳しくはユーザ
	ーズガイドを参照してください。

{	x  PARAM( )

	後判断型ループ構文、または無限ループ構文の始まりです。

}WHILE	x  PARAM( b )

	後判断型ループ構文の終わりです。ブール値 b が０でなければ { まで戻り
	ます。

WHILE(	x  PARAM( )

	前判断型ループ構文の始まりです。

){	x  PARAM( b )

	前判断型ループ構文の条件を評価します。ブール値 b が０ならループを抜
	けます。

}	x  PARAM( )

	分岐構文またはループ構文を閉じます。

CONTINUE	x  PARAM( )

	ループの先頭に戻ります

BREAK	x  PARAM( )

	ループを抜けます。

ERROR	n  PARAM( s )

	エラーメッセージとして文字列 s を表示してＤＯＳにもどります。スクリ
	ーンモードが変えられていても元に戻します。

EXIT	n  PARAM( )

	プログラムを終了しＤＯＳに戻ります。スクリーンモードが変えられていて
	も元に戻します。


＜＜＜　その他のコンパイラ制御ワード　＞＞＞

(	c  PARAM( )

	注釈の一種で、プログラムの実行には影響を与えません。式を見やすくする
	のに使います。

)	c  PARAM( )

	PARAM( 、VAR( 、ARRAY( 、DATA( などを閉じるのに使います。また、単体
	で使用すると ( 同様単なる注釈となります。

[	c  PARAM( )

	配列のインデックス番号指定に使います。単体では使えません。

]	c  PARAM( i )

	配列のインデックス番号指定に使います。数値 i がインデックス番号にな
	ります。単体では使えません。

INT:	c  PARAM( )

	配列や定数データ列の型指定に使います。単体では使えません。

BYTE:	c  PARAM( )

	配列や定数データ列の型指定に使います。単体では使えません。

DATA( <e> )	c  PARAM( )  a i

	定数データ列です。<e> の書き方についてはユーザーズガイドを参照してく
	ださい。データ列の先頭番地 a と総バイト数 i をスタックに置きます。

& <w>	c  PARAM( )  a

	ワード <w> が変数であればその番地をスタックに置きます。<w> が被コン
	パイルワードであればその実行アドレスをスタックに置きます。


＜＜＜　拡張ランタイムライブラリのリロケート　＞＞＞

RELOCATE	n  PARAM( a )

	a番地に存在する拡張ランタイムライブラリをリロケートします。これを実
	行する前に拡張ランタイムライブラリをＤＯＳのファンクションコールを使
	用して a番地にロードしておいてください。


＜＜＜　あまり気にしない方がいいワード　＞＞＞

　以下のワード群は、普通にプログラムをするぶんにはまず使う必要はありません。

PULDE	n  PARAM( i )

	スタックから数値を一つ取り出し、ＤＥレジスタに入れます。マシン語プロ
	グラムのために用意してあるワードです

PSHDE	n  PARAM( )  i

	ＤＥレジスタの値をスタックに置きます。マシン語プログラムのために用意
	してあるワードです

,	ce  PARAM( i )

	数値 i を直接ＣＯＭファイル中に書き込みます。マシン語プログラムをす
	るためのワードです。

C,	ce  PARAM( c )

	バイト型の数値 c を直接ＣＯＭファイルの中に書き込みます。マシン語プ
	ログラムをするためのワードです。

[[	cc  PARAM( )

	ワード定義中で、一時的にワード定義外と同じ状態にします。これによりワ
	ード定義中でも , や C, が使えるようになります。マシン語プログラムを
	するためのワードです。

]]	cc  PARAM( )

	[[ 状態を元に戻します。マシン語プログラムをするためのワードです。

GETPS	n  PARAM( )  a

	現在のパラメータスタックポインタの値を得ます。

JSR	n  PARAM( a )

	& で取得したワードの実行アドレスを呼び出してワードを間接的に実行しま
	す。ただし、これが正しく動作するのは対象となるワードがスタックとのデ
	ータのやり取りを一切しない場合のみです。スタックとデータをやりとりす
	るワードを呼び出してはいけません。

>R	n  PARAM( i )

	数値 i をリターンスタックに送ります。

R>	n  PARAM( )  i

	リターンスタックから取り出した値 i をスタックに置きます。


●　エラーメッセージ

・コンパイル中のエラー


TPA LESS THAN $C000

　コンパイラ起動時にＴＰＡが $C000 を割っています。

NO COMMAND LINE PARAMETER

　コンパイラ起動時にソースプログラム名を指定していません。

FILE NOT FOUND

　指定のソースプログラムが見つかりません。

CAN'T SAVE COM-FILE

　ＣＯＭファイルセーブ時にＤＯＳがエラーを起こしました。（ディスクの空き容量
がない、あるいはディレクトリエントリを使い切っているなど）

ABNORMAL TERMINATED

　文字列、ワード定義など閉じるべきものが閉じられていないのにソースプログラム
が終わってしまいました。

UNDEFINED WORD

　未定義のワードを使用しようとしました。

TOO LONG CHARACTER

　文字定数が２文字を越えています。

TOO LARGE OBJECT

　コンパイルしたＣＯＭファイルの大きさが３２Ｋバイトを越えました。

OUT OF WORKSPACE

　コンパイラの作業領域が足りなくなりました。ワード名などをたくさん定義しすぎ
ています。

DEFINITION NESTED

　ワード定義を閉じないまま他のワード定義をしようとしました。

";" WITHOUT ":"

　ワード定義中でないのに ; に遭遇しました。（状況によってはこのエラーではなく
次のエラーになることもあります）

CONT/DEF MODE ERROR

　ワード定義中では使えないワードをワード定義中に使用しようとしました。または
ワード定義外では使えないワードをワード定義外で使用しようとしました

CAN'T CLOSE DEFINITION

　ワード定義を閉じることができません。恐らく制御構文などの用法が間違っていま
す。

ALREADY DEFINED

　既に定義済みのワードと同じ名前のワードを定義しようとしています。

NOT ADDRESSED OBJECT

　& で、定数またはコンパイラ制御ワード、実行制御ワードのアドレスを得ようとし
ています。

V-ARRAY INVALID

　可変配列が確定していないのに使用しようとしています。

STRUCTURE NEST ERROR

　制御構文が正しく対応していません。たとえば IF{ }WHILE などです。

VARIABLE EXPECTED

　変数が必要なところに変数以外を書いています。

UNEXPECTED WORD

　そこには使えないワードを使おうとしています。たとえば単体で使えないワード
（ BYTE: など）を単体で使用した時などです。

BROKEN STRING

　"- で切った文字列の続きがありません。

TOO LARGE ARRAY

　配列のサイズ（バイト数）が３２７６７を越えています。

V-ARRAY EXPECTED

　可変配列以外の物に ARRAY>> を使おうとしています。


・実行時のエラー

　コンパイルしてできたＣＯＭファイルを実行した時に出るエラーです。実行時のエ
ラーは短い略号で出ます。カッコ内に全文を示します。

IDXOUT	( Index out of range )

　配列変数のインデックス番号が宣言による範囲を越えています。

ARYINV	( V-Array invalid )

　開始番地、サイズが確定していない可変配列を使用しようとしました。

UNPSTK	( Unpaired stack operation )

　ループ中でスタックに数値を置いた回数と取り出した回数が一致していません。

STKOVF	( Stack overflow )

　パラメータスタックポインタが _ENDFREE に２５６バイトまで接近しました。

BREAK	( User Break )

　実行中ＣＴＲＬ−ＳＴＯＰが押されました。

NOTXRL	( Not X-Runtime library )

　拡張ランタイムライブラリ以外のものをリロケートしようとしました。

